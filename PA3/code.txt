
bomb:     file format elf32-i386


Disassembly of section .init:

08048760 <_init>:
 8048760:	53                   	push   %ebx
 8048761:	83 ec 08             	sub    $0x8,%esp
 8048764:	e8 47 02 00 00       	call   80489b0 <__x86.get_pc_thunk.bx>
 8048769:	81 c3 97 48 00 00    	add    $0x4897,%ebx
 804876f:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048775:	85 c0                	test   %eax,%eax
 8048777:	74 05                	je     804877e <_init+0x1e>
 8048779:	e8 f2 01 00 00       	call   8048970 <.plt.got>
 804877e:	83 c4 08             	add    $0x8,%esp
 8048781:	5b                   	pop    %ebx
 8048782:	c3                   	ret    

Disassembly of section .plt:

08048790 <.plt>:
 8048790:	ff 35 04 d0 04 08    	pushl  0x804d004
 8048796:	ff 25 08 d0 04 08    	jmp    *0x804d008
 804879c:	00 00                	add    %al,(%eax)
	...

080487a0 <read@plt>:
 80487a0:	ff 25 0c d0 04 08    	jmp    *0x804d00c
 80487a6:	68 00 00 00 00       	push   $0x0
 80487ab:	e9 e0 ff ff ff       	jmp    8048790 <.plt>

080487b0 <fflush@plt>:
 80487b0:	ff 25 10 d0 04 08    	jmp    *0x804d010
 80487b6:	68 08 00 00 00       	push   $0x8
 80487bb:	e9 d0 ff ff ff       	jmp    8048790 <.plt>

080487c0 <fgets@plt>:
 80487c0:	ff 25 14 d0 04 08    	jmp    *0x804d014
 80487c6:	68 10 00 00 00       	push   $0x10
 80487cb:	e9 c0 ff ff ff       	jmp    8048790 <.plt>

080487d0 <signal@plt>:
 80487d0:	ff 25 18 d0 04 08    	jmp    *0x804d018
 80487d6:	68 18 00 00 00       	push   $0x18
 80487db:	e9 b0 ff ff ff       	jmp    8048790 <.plt>

080487e0 <sleep@plt>:
 80487e0:	ff 25 1c d0 04 08    	jmp    *0x804d01c
 80487e6:	68 20 00 00 00       	push   $0x20
 80487eb:	e9 a0 ff ff ff       	jmp    8048790 <.plt>

080487f0 <alarm@plt>:
 80487f0:	ff 25 20 d0 04 08    	jmp    *0x804d020
 80487f6:	68 28 00 00 00       	push   $0x28
 80487fb:	e9 90 ff ff ff       	jmp    8048790 <.plt>

08048800 <__stack_chk_fail@plt>:
 8048800:	ff 25 24 d0 04 08    	jmp    *0x804d024
 8048806:	68 30 00 00 00       	push   $0x30
 804880b:	e9 80 ff ff ff       	jmp    8048790 <.plt>

08048810 <strcpy@plt>:
 8048810:	ff 25 28 d0 04 08    	jmp    *0x804d028
 8048816:	68 38 00 00 00       	push   $0x38
 804881b:	e9 70 ff ff ff       	jmp    8048790 <.plt>

08048820 <gethostname@plt>:
 8048820:	ff 25 2c d0 04 08    	jmp    *0x804d02c
 8048826:	68 40 00 00 00       	push   $0x40
 804882b:	e9 60 ff ff ff       	jmp    8048790 <.plt>

08048830 <getenv@plt>:
 8048830:	ff 25 30 d0 04 08    	jmp    *0x804d030
 8048836:	68 48 00 00 00       	push   $0x48
 804883b:	e9 50 ff ff ff       	jmp    8048790 <.plt>

08048840 <malloc@plt>:
 8048840:	ff 25 34 d0 04 08    	jmp    *0x804d034
 8048846:	68 50 00 00 00       	push   $0x50
 804884b:	e9 40 ff ff ff       	jmp    8048790 <.plt>

08048850 <puts@plt>:
 8048850:	ff 25 38 d0 04 08    	jmp    *0x804d038
 8048856:	68 58 00 00 00       	push   $0x58
 804885b:	e9 30 ff ff ff       	jmp    8048790 <.plt>

08048860 <__memmove_chk@plt>:
 8048860:	ff 25 3c d0 04 08    	jmp    *0x804d03c
 8048866:	68 60 00 00 00       	push   $0x60
 804886b:	e9 20 ff ff ff       	jmp    8048790 <.plt>

08048870 <exit@plt>:
 8048870:	ff 25 40 d0 04 08    	jmp    *0x804d040
 8048876:	68 68 00 00 00       	push   $0x68
 804887b:	e9 10 ff ff ff       	jmp    8048790 <.plt>

08048880 <__libc_start_main@plt>:
 8048880:	ff 25 44 d0 04 08    	jmp    *0x804d044
 8048886:	68 70 00 00 00       	push   $0x70
 804888b:	e9 00 ff ff ff       	jmp    8048790 <.plt>

08048890 <write@plt>:
 8048890:	ff 25 48 d0 04 08    	jmp    *0x804d048
 8048896:	68 78 00 00 00       	push   $0x78
 804889b:	e9 f0 fe ff ff       	jmp    8048790 <.plt>

080488a0 <strcasecmp@plt>:
 80488a0:	ff 25 4c d0 04 08    	jmp    *0x804d04c
 80488a6:	68 80 00 00 00       	push   $0x80
 80488ab:	e9 e0 fe ff ff       	jmp    8048790 <.plt>

080488b0 <__isoc99_sscanf@plt>:
 80488b0:	ff 25 50 d0 04 08    	jmp    *0x804d050
 80488b6:	68 88 00 00 00       	push   $0x88
 80488bb:	e9 d0 fe ff ff       	jmp    8048790 <.plt>

080488c0 <fopen@plt>:
 80488c0:	ff 25 54 d0 04 08    	jmp    *0x804d054
 80488c6:	68 90 00 00 00       	push   $0x90
 80488cb:	e9 c0 fe ff ff       	jmp    8048790 <.plt>

080488d0 <__errno_location@plt>:
 80488d0:	ff 25 58 d0 04 08    	jmp    *0x804d058
 80488d6:	68 98 00 00 00       	push   $0x98
 80488db:	e9 b0 fe ff ff       	jmp    8048790 <.plt>

080488e0 <__printf_chk@plt>:
 80488e0:	ff 25 5c d0 04 08    	jmp    *0x804d05c
 80488e6:	68 a0 00 00 00       	push   $0xa0
 80488eb:	e9 a0 fe ff ff       	jmp    8048790 <.plt>

080488f0 <socket@plt>:
 80488f0:	ff 25 60 d0 04 08    	jmp    *0x804d060
 80488f6:	68 a8 00 00 00       	push   $0xa8
 80488fb:	e9 90 fe ff ff       	jmp    8048790 <.plt>

08048900 <__fprintf_chk@plt>:
 8048900:	ff 25 64 d0 04 08    	jmp    *0x804d064
 8048906:	68 b0 00 00 00       	push   $0xb0
 804890b:	e9 80 fe ff ff       	jmp    8048790 <.plt>

08048910 <gethostbyname@plt>:
 8048910:	ff 25 68 d0 04 08    	jmp    *0x804d068
 8048916:	68 b8 00 00 00       	push   $0xb8
 804891b:	e9 70 fe ff ff       	jmp    8048790 <.plt>

08048920 <strtol@plt>:
 8048920:	ff 25 6c d0 04 08    	jmp    *0x804d06c
 8048926:	68 c0 00 00 00       	push   $0xc0
 804892b:	e9 60 fe ff ff       	jmp    8048790 <.plt>

08048930 <connect@plt>:
 8048930:	ff 25 70 d0 04 08    	jmp    *0x804d070
 8048936:	68 c8 00 00 00       	push   $0xc8
 804893b:	e9 50 fe ff ff       	jmp    8048790 <.plt>

08048940 <close@plt>:
 8048940:	ff 25 74 d0 04 08    	jmp    *0x804d074
 8048946:	68 d0 00 00 00       	push   $0xd0
 804894b:	e9 40 fe ff ff       	jmp    8048790 <.plt>

08048950 <__ctype_b_loc@plt>:
 8048950:	ff 25 78 d0 04 08    	jmp    *0x804d078
 8048956:	68 d8 00 00 00       	push   $0xd8
 804895b:	e9 30 fe ff ff       	jmp    8048790 <.plt>

08048960 <__sprintf_chk@plt>:
 8048960:	ff 25 7c d0 04 08    	jmp    *0x804d07c
 8048966:	68 e0 00 00 00       	push   $0xe0
 804896b:	e9 20 fe ff ff       	jmp    8048790 <.plt>

Disassembly of section .plt.got:

08048970 <.plt.got>:
 8048970:	ff 25 fc cf 04 08    	jmp    *0x804cffc
 8048976:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

08048980 <_start>:
 8048980:	31 ed                	xor    %ebp,%ebp
 8048982:	5e                   	pop    %esi
 8048983:	89 e1                	mov    %esp,%ecx
 8048985:	83 e4 f0             	and    $0xfffffff0,%esp
 8048988:	50                   	push   %eax
 8048989:	54                   	push   %esp
 804898a:	52                   	push   %edx
 804898b:	68 b0 a1 04 08       	push   $0x804a1b0
 8048990:	68 50 a1 04 08       	push   $0x804a150
 8048995:	51                   	push   %ecx
 8048996:	56                   	push   %esi
 8048997:	68 7b 8a 04 08       	push   $0x8048a7b
 804899c:	e8 df fe ff ff       	call   8048880 <__libc_start_main@plt>
 80489a1:	f4                   	hlt    
 80489a2:	66 90                	xchg   %ax,%ax
 80489a4:	66 90                	xchg   %ax,%ax
 80489a6:	66 90                	xchg   %ax,%ax
 80489a8:	66 90                	xchg   %ax,%ax
 80489aa:	66 90                	xchg   %ax,%ax
 80489ac:	66 90                	xchg   %ax,%ax
 80489ae:	66 90                	xchg   %ax,%ax

080489b0 <__x86.get_pc_thunk.bx>:
 80489b0:	8b 1c 24             	mov    (%esp),%ebx
 80489b3:	c3                   	ret    
 80489b4:	66 90                	xchg   %ax,%ax
 80489b6:	66 90                	xchg   %ax,%ax
 80489b8:	66 90                	xchg   %ax,%ax
 80489ba:	66 90                	xchg   %ax,%ax
 80489bc:	66 90                	xchg   %ax,%ax
 80489be:	66 90                	xchg   %ax,%ax

080489c0 <deregister_tm_clones>:
 80489c0:	b8 c3 d7 04 08       	mov    $0x804d7c3,%eax
 80489c5:	2d c0 d7 04 08       	sub    $0x804d7c0,%eax
 80489ca:	83 f8 06             	cmp    $0x6,%eax
 80489cd:	76 1a                	jbe    80489e9 <deregister_tm_clones+0x29>
 80489cf:	b8 00 00 00 00       	mov    $0x0,%eax
 80489d4:	85 c0                	test   %eax,%eax
 80489d6:	74 11                	je     80489e9 <deregister_tm_clones+0x29>
 80489d8:	55                   	push   %ebp
 80489d9:	89 e5                	mov    %esp,%ebp
 80489db:	83 ec 14             	sub    $0x14,%esp
 80489de:	68 c0 d7 04 08       	push   $0x804d7c0
 80489e3:	ff d0                	call   *%eax
 80489e5:	83 c4 10             	add    $0x10,%esp
 80489e8:	c9                   	leave  
 80489e9:	f3 c3                	repz ret 
 80489eb:	90                   	nop
 80489ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

080489f0 <register_tm_clones>:
 80489f0:	b8 c0 d7 04 08       	mov    $0x804d7c0,%eax
 80489f5:	2d c0 d7 04 08       	sub    $0x804d7c0,%eax
 80489fa:	c1 f8 02             	sar    $0x2,%eax
 80489fd:	89 c2                	mov    %eax,%edx
 80489ff:	c1 ea 1f             	shr    $0x1f,%edx
 8048a02:	01 d0                	add    %edx,%eax
 8048a04:	d1 f8                	sar    %eax
 8048a06:	74 1b                	je     8048a23 <register_tm_clones+0x33>
 8048a08:	ba 00 00 00 00       	mov    $0x0,%edx
 8048a0d:	85 d2                	test   %edx,%edx
 8048a0f:	74 12                	je     8048a23 <register_tm_clones+0x33>
 8048a11:	55                   	push   %ebp
 8048a12:	89 e5                	mov    %esp,%ebp
 8048a14:	83 ec 10             	sub    $0x10,%esp
 8048a17:	50                   	push   %eax
 8048a18:	68 c0 d7 04 08       	push   $0x804d7c0
 8048a1d:	ff d2                	call   *%edx
 8048a1f:	83 c4 10             	add    $0x10,%esp
 8048a22:	c9                   	leave  
 8048a23:	f3 c3                	repz ret 
 8048a25:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048a30 <__do_global_dtors_aux>:
 8048a30:	80 3d e8 d7 04 08 00 	cmpb   $0x0,0x804d7e8
 8048a37:	75 13                	jne    8048a4c <__do_global_dtors_aux+0x1c>
 8048a39:	55                   	push   %ebp
 8048a3a:	89 e5                	mov    %esp,%ebp
 8048a3c:	83 ec 08             	sub    $0x8,%esp
 8048a3f:	e8 7c ff ff ff       	call   80489c0 <deregister_tm_clones>
 8048a44:	c6 05 e8 d7 04 08 01 	movb   $0x1,0x804d7e8
 8048a4b:	c9                   	leave  
 8048a4c:	f3 c3                	repz ret 
 8048a4e:	66 90                	xchg   %ax,%ax

08048a50 <frame_dummy>:
 8048a50:	b8 10 cf 04 08       	mov    $0x804cf10,%eax
 8048a55:	8b 10                	mov    (%eax),%edx
 8048a57:	85 d2                	test   %edx,%edx
 8048a59:	75 05                	jne    8048a60 <frame_dummy+0x10>
 8048a5b:	eb 93                	jmp    80489f0 <register_tm_clones>
 8048a5d:	8d 76 00             	lea    0x0(%esi),%esi
 8048a60:	ba 00 00 00 00       	mov    $0x0,%edx
 8048a65:	85 d2                	test   %edx,%edx
 8048a67:	74 f2                	je     8048a5b <frame_dummy+0xb>
 8048a69:	55                   	push   %ebp
 8048a6a:	89 e5                	mov    %esp,%ebp
 8048a6c:	83 ec 14             	sub    $0x14,%esp
 8048a6f:	50                   	push   %eax
 8048a70:	ff d2                	call   *%edx
 8048a72:	83 c4 10             	add    $0x10,%esp
 8048a75:	c9                   	leave  
 8048a76:	e9 75 ff ff ff       	jmp    80489f0 <register_tm_clones>

08048a7b <main>:
 8048a7b:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8048a7f:	83 e4 f0             	and    $0xfffffff0,%esp
 8048a82:	ff 71 fc             	pushl  -0x4(%ecx)
 8048a85:	55                   	push   %ebp
 8048a86:	89 e5                	mov    %esp,%ebp
 8048a88:	53                   	push   %ebx
 8048a89:	51                   	push   %ecx
 8048a8a:	8b 01                	mov    (%ecx),%eax
 8048a8c:	8b 59 04             	mov    0x4(%ecx),%ebx
 8048a8f:	83 f8 01             	cmp    $0x1,%eax
 8048a92:	75 0c                	jne    8048aa0 <main+0x25>
 8048a94:	a1 e0 d7 04 08       	mov    0x804d7e0,%eax
 8048a99:	a3 f0 d7 04 08       	mov    %eax,0x804d7f0
 8048a9e:	eb 5b                	jmp    8048afb <main+0x80>
 8048aa0:	83 f8 02             	cmp    $0x2,%eax
 8048aa3:	75 39                	jne    8048ade <main+0x63>
 8048aa5:	83 ec 08             	sub    $0x8,%esp
 8048aa8:	68 d0 a1 04 08       	push   $0x804a1d0
 8048aad:	ff 73 04             	pushl  0x4(%ebx)
 8048ab0:	e8 0b fe ff ff       	call   80488c0 <fopen@plt>
 8048ab5:	a3 f0 d7 04 08       	mov    %eax,0x804d7f0
 8048aba:	83 c4 10             	add    $0x10,%esp
 8048abd:	85 c0                	test   %eax,%eax
 8048abf:	75 3a                	jne    8048afb <main+0x80>
 8048ac1:	ff 73 04             	pushl  0x4(%ebx)
 8048ac4:	ff 33                	pushl  (%ebx)
 8048ac6:	68 d2 a1 04 08       	push   $0x804a1d2
 8048acb:	6a 01                	push   $0x1
 8048acd:	e8 0e fe ff ff       	call   80488e0 <__printf_chk@plt>
 8048ad2:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048ad9:	e8 92 fd ff ff       	call   8048870 <exit@plt>
 8048ade:	83 ec 04             	sub    $0x4,%esp
 8048ae1:	ff 33                	pushl  (%ebx)
 8048ae3:	68 ef a1 04 08       	push   $0x804a1ef
 8048ae8:	6a 01                	push   $0x1
 8048aea:	e8 f1 fd ff ff       	call   80488e0 <__printf_chk@plt>
 8048aef:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048af6:	e8 75 fd ff ff       	call   8048870 <exit@plt>
 8048afb:	e8 05 07 00 00       	call   8049205 <initialize_bomb>
 8048b00:	83 ec 0c             	sub    $0xc,%esp
 8048b03:	68 60 a2 04 08       	push   $0x804a260
 8048b08:	e8 43 fd ff ff       	call   8048850 <puts@plt>
 8048b0d:	c7 04 24 9c a2 04 08 	movl   $0x804a29c,(%esp)
 8048b14:	e8 37 fd ff ff       	call   8048850 <puts@plt>
 8048b19:	e8 b4 09 00 00       	call   80494d2 <read_line>
 8048b1e:	89 04 24             	mov    %eax,(%esp)
 8048b21:	e8 07 01 00 00       	call   8048c2d <phase_1>
 8048b26:	e8 a0 0a 00 00       	call   80495cb <phase_defused>
 8048b2b:	c7 04 24 c8 a2 04 08 	movl   $0x804a2c8,(%esp)
 8048b32:	e8 19 fd ff ff       	call   8048850 <puts@plt>
 8048b37:	e8 96 09 00 00       	call   80494d2 <read_line>
 8048b3c:	89 04 24             	mov    %eax,(%esp)
 8048b3f:	e8 45 01 00 00       	call   8048c89 <phase_2>
 8048b44:	e8 82 0a 00 00       	call   80495cb <phase_defused>
 8048b49:	c7 04 24 09 a2 04 08 	movl   $0x804a209,(%esp)
 8048b50:	e8 fb fc ff ff       	call   8048850 <puts@plt>
 8048b55:	e8 78 09 00 00       	call   80494d2 <read_line>
 8048b5a:	89 04 24             	mov    %eax,(%esp)
 8048b5d:	e8 48 01 00 00       	call   8048caa <phase_3>
 8048b62:	e8 64 0a 00 00       	call   80495cb <phase_defused>
 8048b67:	c7 04 24 27 a2 04 08 	movl   $0x804a227,(%esp)
 8048b6e:	e8 dd fc ff ff       	call   8048850 <puts@plt>
 8048b73:	e8 5a 09 00 00       	call   80494d2 <read_line>
 8048b78:	89 04 24             	mov    %eax,(%esp)
 8048b7b:	e8 b2 01 00 00       	call   8048d32 <phase_4>
 8048b80:	e8 46 0a 00 00       	call   80495cb <phase_defused>
 8048b85:	c7 04 24 f4 a2 04 08 	movl   $0x804a2f4,(%esp)
 8048b8c:	e8 bf fc ff ff       	call   8048850 <puts@plt>
 8048b91:	e8 3c 09 00 00       	call   80494d2 <read_line>
 8048b96:	89 04 24             	mov    %eax,(%esp)
 8048b99:	e8 f7 01 00 00       	call   8048d95 <phase_5>
 8048b9e:	e8 28 0a 00 00       	call   80495cb <phase_defused>
 8048ba3:	c7 04 24 38 a2 04 08 	movl   $0x804a238,(%esp)
 8048baa:	e8 a1 fc ff ff       	call   8048850 <puts@plt>
 8048baf:	e8 1e 09 00 00       	call   80494d2 <read_line>
 8048bb4:	89 04 24             	mov    %eax,(%esp)
 8048bb7:	e8 db 02 00 00       	call   8048e97 <phase_6>
 8048bbc:	e8 0a 0a 00 00       	call   80495cb <phase_defused>
 8048bc1:	c7 04 24 18 a3 04 08 	movl   $0x804a318,(%esp)
 8048bc8:	e8 83 fc ff ff       	call   8048850 <puts@plt>
 8048bcd:	e8 00 09 00 00       	call   80494d2 <read_line>
 8048bd2:	89 04 24             	mov    %eax,(%esp)
 8048bd5:	e8 32 03 00 00       	call   8048f0c <phase_7>
 8048bda:	e8 ec 09 00 00       	call   80495cb <phase_defused>
 8048bdf:	c7 04 24 38 a3 04 08 	movl   $0x804a338,(%esp)
 8048be6:	e8 65 fc ff ff       	call   8048850 <puts@plt>
 8048beb:	e8 e2 08 00 00       	call   80494d2 <read_line>
 8048bf0:	89 04 24             	mov    %eax,(%esp)
 8048bf3:	e8 94 03 00 00       	call   8048f8c <phase_8>
 8048bf8:	e8 ce 09 00 00       	call   80495cb <phase_defused>
 8048bfd:	c7 04 24 56 a2 04 08 	movl   $0x804a256,(%esp)
 8048c04:	e8 47 fc ff ff       	call   8048850 <puts@plt>
 8048c09:	e8 c4 08 00 00       	call   80494d2 <read_line>
 8048c0e:	89 04 24             	mov    %eax,(%esp)
 8048c11:	e8 ad 04 00 00       	call   80490c3 <phase_9>
 8048c16:	e8 b0 09 00 00       	call   80495cb <phase_defused>
 8048c1b:	83 c4 10             	add    $0x10,%esp
 8048c1e:	b8 00 00 00 00       	mov    $0x0,%eax
 8048c23:	8d 65 f8             	lea    -0x8(%ebp),%esp
 8048c26:	59                   	pop    %ecx
 8048c27:	5b                   	pop    %ebx
 8048c28:	5d                   	pop    %ebp
 8048c29:	8d 61 fc             	lea    -0x4(%ecx),%esp
 8048c2c:	c3                   	ret    

08048c2d <phase_1>:
 8048c2d:	83 ec 20             	sub    $0x20,%esp
 8048c30:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048c36:	89 44 24 10          	mov    %eax,0x10(%esp)
 8048c3a:	31 c0                	xor    %eax,%eax
 8048c3c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 8048c43:	00 
 8048c44:	8d 44 24 0c          	lea    0xc(%esp),%eax
 8048c48:	50                   	push   %eax
 8048c49:	68 d4 a5 04 08       	push   $0x804a5d4
 8048c4e:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048c52:	e8 59 fc ff ff       	call   80488b0 <__isoc99_sscanf@plt>
 8048c57:	83 c4 10             	add    $0x10,%esp
 8048c5a:	83 f8 01             	cmp    $0x1,%eax
 8048c5d:	74 05                	je     8048c64 <phase_1+0x37>
 8048c5f:	e8 f6 07 00 00       	call   804945a <explode_bomb>
 8048c64:	81 7c 24 08 df 03 00 	cmpl   $0x3df,0x8(%esp)
 8048c6b:	00 
 8048c6c:	74 05                	je     8048c73 <phase_1+0x46>
 8048c6e:	e8 e7 07 00 00       	call   804945a <explode_bomb>
 8048c73:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048c77:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048c7e:	74 05                	je     8048c85 <phase_1+0x58>
 8048c80:	e8 7b fb ff ff       	call   8048800 <__stack_chk_fail@plt>
 8048c85:	83 c4 1c             	add    $0x1c,%esp
 8048c88:	c3                   	ret    

08048c89 <phase_2>:
 8048c89:	83 ec 14             	sub    $0x14,%esp
 8048c8c:	68 60 a3 04 08       	push   $0x804a360
 8048c91:	ff 74 24 1c          	pushl  0x1c(%esp)
 8048c95:	e8 06 05 00 00       	call   80491a0 <strings_not_equal>
 8048c9a:	83 c4 10             	add    $0x10,%esp
 8048c9d:	85 c0                	test   %eax,%eax
 8048c9f:	74 05                	je     8048ca6 <phase_2+0x1d>
 8048ca1:	e8 b4 07 00 00       	call   804945a <explode_bomb>
 8048ca6:	83 c4 0c             	add    $0xc,%esp
 8048ca9:	c3                   	ret    

08048caa <phase_3>:
 8048caa:	83 ec 18             	sub    $0x18,%esp
 8048cad:	68 94 a3 04 08       	push   $0x804a394
 8048cb2:	e8 ca 04 00 00       	call   8049181 <string_length>
 8048cb7:	83 c0 01             	add    $0x1,%eax
 8048cba:	89 04 24             	mov    %eax,(%esp)
 8048cbd:	e8 7e fb ff ff       	call   8048840 <malloc@plt>
 8048cc2:	c7 00 54 6f 20 62    	movl   $0x62206f54,(%eax)
 8048cc8:	c7 40 04 65 2c 20 6f 	movl   $0x6f202c65,0x4(%eax)
 8048ccf:	c7 40 08 72 20 6e 6f 	movl   $0x6f6e2072,0x8(%eax)
 8048cd6:	c7 40 0c 74 20 74 6f 	movl   $0x6f742074,0xc(%eax)
 8048cdd:	c7 40 10 20 62 65 3a 	movl   $0x3a656220,0x10(%eax)
 8048ce4:	c7 40 14 20 74 68 61 	movl   $0x61687420,0x14(%eax)
 8048ceb:	c7 40 18 74 20 69 73 	movl   $0x73692074,0x18(%eax)
 8048cf2:	c7 40 1c 20 74 68 65 	movl   $0x65687420,0x1c(%eax)
 8048cf9:	c7 40 20 20 71 75 65 	movl   $0x65757120,0x20(%eax)
 8048d00:	c7 40 24 73 74 69 6f 	movl   $0x6f697473,0x24(%eax)
 8048d07:	66 c7 40 28 6e 2e    	movw   $0x2e6e,0x28(%eax)
 8048d0d:	c6 40 2a 00          	movb   $0x0,0x2a(%eax)
 8048d11:	c6 40 0f 33          	movb   $0x33,0xf(%eax)
 8048d15:	83 c4 08             	add    $0x8,%esp
 8048d18:	50                   	push   %eax
 8048d19:	ff 74 24 1c          	pushl  0x1c(%esp) //need to check value of esp at THIS line
 8048d1d:	e8 7e 04 00 00       	call   80491a0 <strings_not_equal>
 8048d22:	83 c4 10             	add    $0x10,%esp
 8048d25:	85 c0                	test   %eax,%eax
 8048d27:	74 05                	je     8048d2e <phase_3+0x84>
 8048d29:	e8 2c 07 00 00       	call   804945a <explode_bomb>
 8048d2e:	83 c4 0c             	add    $0xc,%esp
 8048d31:	c3                   	ret    



08048d32 <phase_4>:
 8048d32:	56                   	push   %esi
 8048d33:	53                   	push   %ebx
 8048d34:	83 ec 2c             	sub    $0x2c,%esp
 8048d37:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048d3d:	89 44 24 24          	mov    %eax,0x24(%esp)
 8048d41:	31 c0                	xor    %eax,%eax
 8048d43:	8d 44 24 0c          	lea    0xc(%esp),%eax
 8048d47:	50                   	push   %eax
 8048d48:	ff 74 24 3c          	pushl  0x3c(%esp)
 8048d4c:	e8 46 07 00 00       	call   8049497 <read_six_numbers>
 8048d51:	83 c4 10             	add    $0x10,%esp
 8048d54:	83 7c 24 04 02       	cmpl   $0x2,0x4(%esp)
 8048d59:	74 05                	je     8048d60 <phase_4+0x2e>
 8048d5b:	e8 fa 06 00 00       	call   804945a <explode_bomb>
 8048d60:	8d 5c 24 04          	lea    0x4(%esp),%ebx
 8048d64:	8d 74 24 18          	lea    0x18(%esp),%esi

 8048d68:	8b 03                	mov    (%ebx),%eax
 8048d6a:	01 c0                	add    %eax,%eax
 8048d6c:	39 43 04             	cmp    %eax,0x4(%ebx)
 8048d6f:	74 05                	je     8048d76 <phase_4+0x44>
 8048d71:	e8 e4 06 00 00       	call   804945a <explode_bomb>
 8048d76:	83 c3 04             	add    $0x4,%ebx
 8048d79:	39 f3                	cmp    %esi,%ebx
 8048d7b:	75 eb                	jne    8048d68 <phase_4+0x36>

 8048d7d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8048d81:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048d88:	74 05                	je     8048d8f <phase_4+0x5d>
 8048d8a:	e8 71 fa ff ff       	call   8048800 <__stack_chk_fail@plt>
 8048d8f:	83 c4 24             	add    $0x24,%esp
 8048d92:	5b                   	pop    %ebx
 8048d93:	5e                   	pop    %esi
 8048d94:	c3                   	ret    

08048d95 <phase_5>:
 8048d95:	83 ec 1c             	sub    $0x1c,%esp
 8048d98:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048d9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8048da2:	31 c0                	xor    %eax,%eax
 8048da4:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048da8:	50                   	push   %eax
 8048da9:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048dad:	50                   	push   %eax
 8048dae:	68 d1 a5 04 08       	push   $0x804a5d1
 8048db3:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048db7:	e8 f4 fa ff ff       	call   80488b0 <__isoc99_sscanf@plt>
 8048dbc:	83 c4 10             	add    $0x10,%esp
 8048dbf:	83 f8 01             	cmp    $0x1,%eax
 8048dc2:	7f 05                	jg     8048dc9 <phase_5+0x34> //need to enter more than one thing
 8048dc4:	e8 91 06 00 00       	call   804945a <explode_bomb>
 8048dc9:	83 7c 24 04 07       	cmpl   $0x7,0x4(%esp)		//first entry must be less than 7
 8048dce:	77 3c                	ja     8048e0c <phase_5+0x77>
 8048dd0:	8b 44 24 04          	mov    0x4(%esp),%eax
 8048dd4:	ff 24 85 c0 a3 04 08 	jmp    *0x804a3c0(,%eax,4)
 8048ddb:	b8 31 03 00 00       	mov    $0x331,%eax
 8048de0:	eb 3b                	jmp    8048e1d <phase_5+0x88>
 8048de2:	b8 f9 02 00 00       	mov    $0x2f9,%eax
 8048de7:	eb 34                	jmp    8048e1d <phase_5+0x88>
 8048de9:	b8 50 02 00 00       	mov    $0x250,%eax
 8048dee:	eb 2d                	jmp    8048e1d <phase_5+0x88>
 8048df0:	b8 e2 00 00 00       	mov    $0xe2,%eax
 8048df5:	eb 26                	jmp    8048e1d <phase_5+0x88>
 8048df7:	b8 a1 03 00 00       	mov    $0x3a1,%eax
 8048dfc:	eb 1f                	jmp    8048e1d <phase_5+0x88>
 8048dfe:	b8 9c 02 00 00       	mov    $0x29c,%eax
 8048e03:	eb 18                	jmp    8048e1d <phase_5+0x88>
 8048e05:	b8 d8 00 00 00       	mov    $0xd8,%eax
 8048e0a:	eb 11                	jmp    8048e1d <phase_5+0x88>
 8048e0c:	e8 49 06 00 00       	call   804945a <explode_bomb>
 8048e11:	b8 00 00 00 00       	mov    $0x0,%eax
 8048e16:	eb 05                	jmp    8048e1d <phase_5+0x88>
 8048e18:	b8 5d 00 00 00       	mov    $0x5d,%eax
 8048e1d:	3b 44 24 08          	cmp    0x8(%esp),%eax
 8048e21:	74 05                	je     8048e28 <phase_5+0x93> //second entry must be equal to eax, which is 226 here
 8048e23:	e8 32 06 00 00       	call   804945a <explode_bomb>
 8048e28:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048e2c:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048e33:	74 05                	je     8048e3a <phase_5+0xa5>
 8048e35:	e8 c6 f9 ff ff       	call   8048800 <__stack_chk_fail@plt>
 8048e3a:	83 c4 1c             	add    $0x1c,%esp
 8048e3d:	c3                   	ret    

08048e3e <func6>:
 8048e3e:	56                   	push   %esi		//pushes esi onto the stack
 8048e3f:	53                   	push   %ebx		//pushes ebx onto the stack
 8048e40:	83 ec 04             	sub    $0x4,%esp//subtracts 4 from the stack pointer register
 8048e43:	8b 54 24 10          	mov    0x10(%esp),%edx //edx = the value at esp shifted 16 (esp[16] or (esp-4)[16])
 8048e47:	8b 74 24 14          	mov    0x14(%esp),%esi //esi = esp[20]
 8048e4b:	8b 4c 24 18          	mov    0x18(%esp),%ecx //ecx = esp[24]
 8048e4f:	89 c8                	mov    %ecx,%eax	   //eax = ecx
 8048e51:	29 f0                	sub    %esi,%eax		//eax -= esi
 8048e53:	89 c3                	mov    %eax,%ebx  		//ebx = eax; ebx = eax-esi = ecx-esi = (esp-4)[24] - esi
 8048e55:	c1 eb 1f             	shr    $0x1f,%ebx //shifts ebx right 32 times; should effectively set it to ebx = 0
 8048e58:	01 d8                	add    %ebx,%eax //eax += ebx
 8048e5a:	d1 f8                	sar    %eax //eax /= 2
 8048e5c:	8d 1c 30             	lea    (%eax,%esi,1),%ebx // ebx = esi + eax
 8048e5f:	39 d3                	cmp    %edx,%ebx
 8048e61:	7e 15                	jle    8048e78 <func6+0x3a> //if ebx <= edx, jumps past RCO; function ends if ebx = edx
 8048e63:	83 ec 04             	sub    $0x4,%esp			//esp -= 4
 8048e66:	8d 43 ff             	lea    -0x1(%ebx),%eax		//eax = &ebx[i-1]
 8048e69:	50                   	push   %eax
 8048e6a:	56                   	push   %esi
 8048e6b:	52                   	push   %edx
 8048e6c:	e8 cd ff ff ff       	call   8048e3e <func6> //RECURSIVE CALL ONE (RCO)
 8048e71:	83 c4 10             	add    $0x10,%esp
 8048e74:	01 d8                	add    %ebx,%eax
 8048e76:	eb 19                	jmp    8048e91 <func6+0x53> //jumps to end of function; if RCO gets called, program ends after it returns
 8048e78:	89 d8                	mov    %ebx,%eax 			//eax = ebx
 8048e7a:	39 d3                	cmp    %edx,%ebx
 8048e7c:	7d 13                	jge    8048e91 <func6+0x53> //jumps to end of function if ebx>=edx
 8048e7e:	83 ec 04             	sub    $0x4,%esp			//esp -= 4
 8048e81:	51                   	push   %ecx
 8048e82:	8d 43 01             	lea    0x1(%ebx),%eax		//eax = &ebx[1]
 8048e85:	50                   	push   %eax
 8048e86:	52                   	push   %edx
 8048e87:	e8 b2 ff ff ff       	call   8048e3e <func6> //RECURSIVE CALL TWO (RCT)
 8048e8c:	83 c4 10             	add    $0x10,%esp
 8048e8f:	01 d8                	add    %ebx,%eax
 8048e91:	83 c4 04             	add    $0x4,%esp
 8048e94:	5b                   	pop    %ebx
 8048e95:	5e                   	pop    %esi
 8048e96:	c3                   	ret    

08048e97 <phase_6>:
 8048e97:	83 ec 1c             	sub    $0x1c,%esp
 8048e9a:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048ea0:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8048ea4:	31 c0                	xor    %eax,%eax
 8048ea6:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048eaa:	50                   	push   %eax
 8048eab:	8d 44 24 08          	lea    0x8(%esp),%eax
 8048eaf:	50                   	push   %eax
 8048eb0:	68 d1 a5 04 08       	push   $0x804a5d1
 8048eb5:	ff 74 24 2c          	pushl  0x2c(%esp)
 8048eb9:	e8 f2 f9 ff ff       	call   80488b0 <__isoc99_sscanf@plt>
 8048ebe:	83 c4 10             	add    $0x10,%esp
 8048ec1:	83 f8 02             	cmp    $0x2,%eax
 8048ec4:	75 07                	jne    8048ecd <phase_6+0x36> //explodes if you don't enter exactly two terms
 8048ec6:	83 7c 24 04 0e       	cmpl   $0xe,0x4(%esp)
 8048ecb:	76 05                	jbe    8048ed2 <phase_6+0x3b> //bomb explodes if your first entry is greater than or equal to 14; first entry < 13
 8048ecd:	e8 88 05 00 00       	call   804945a <explode_bomb>
 8048ed2:	83 ec 04             	sub    $0x4,%esp
 8048ed5:	6a 0e                	push   $0xe
 8048ed7:	6a 00                	push   $0x0
 8048ed9:	ff 74 24 10          	pushl  0x10(%esp)
 8048edd:	e8 5c ff ff ff       	call   8048e3e <func6> //changes eax with a recursive function
 8048ee2:	83 c4 10             	add    $0x10,%esp
 8048ee5:	83 f8 13             	cmp    $0x13,%eax
 8048ee8:	75 07                	jne    8048ef1 <phase_6+0x5a> //bomb explodes if eax isn't equal to 19
 8048eea:	83 7c 24 08 13       	cmpl   $0x13,0x8(%esp)
 8048eef:	74 05                	je     8048ef6 <phase_6+0x5f> //bomb explodes if the second entry isn't equal to 19
 8048ef1:	e8 64 05 00 00       	call   804945a <explode_bomb>
 8048ef6:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048efa:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048f01:	74 05                	je     8048f08 <phase_6+0x71>
 8048f03:	e8 f8 f8 ff ff       	call   8048800 <__stack_chk_fail@plt>
 8048f08:	83 c4 1c             	add    $0x1c,%esp
 8048f0b:	c3                   	ret    
//4 19
//I still don't understand what func6 does, but 4 set eax to the proper value

08048f0c <phase_7>:
 8048f0c:	53                   	push   %ebx
 8048f0d:	83 ec 24             	sub    $0x24,%esp
 8048f10:	8b 5c 24 2c          	mov    0x2c(%esp),%ebx
 8048f14:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048f1a:	89 44 24 18          	mov    %eax,0x18(%esp)
 8048f1e:	31 c0                	xor    %eax,%eax
 8048f20:	53                   	push   %ebx
 8048f21:	e8 5b 02 00 00       	call   8049181 <string_length> //sets eax to the length of your string
 8048f26:	83 c4 10             	add    $0x10,%esp
 8048f29:	83 f8 06             	cmp    $0x6,%eax
 8048f2c:	74 05                	je     8048f33 <phase_7+0x27> //bomb explodes if eax !=6; length of string will be 6
 8048f2e:	e8 27 05 00 00       	call   804945a <explode_bomb>
 8048f33:	b8 00 00 00 00       	mov    $0x0,%eax
//'encrypts' string, going char by char. Each char maps to a unique char
 8048f38:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
 8048f3c:	83 e2 0f             	and    $0xf,%edx
 8048f3f:	0f b6 92 e0 a3 04 08 	movzbl 0x804a3e0(%edx),%edx
 8048f46:	88 54 04 05          	mov    %dl,0x5(%esp,%eax,1)
 8048f4a:	83 c0 01             	add    $0x1,%eax
 8048f4d:	83 f8 06             	cmp    $0x6,%eax
 8048f50:	75 e6                	jne    8048f38 <phase_7+0x2c> //loop

 8048f52:	c6 44 24 0b 00       	movb   $0x0,0xb(%esp)
 8048f57:	83 ec 08             	sub    $0x8,%esp
 8048f5a:	68 57 a3 04 08       	push   $0x804a357
 8048f5f:	8d 44 24 11          	lea    0x11(%esp),%eax
 8048f63:	50                   	push   %eax					//need to check value of string here; supposed to become 'flyers' after the loop
 8048f64:	e8 37 02 00 00       	call   80491a0 <strings_not_equal>
 8048f69:	83 c4 10             	add    $0x10,%esp
 8048f6c:	85 c0                	test   %eax,%eax
 8048f6e:	74 05                	je     8048f75 <phase_7+0x69> //jumps if the string you entered is correct
 8048f70:	e8 e5 04 00 00       	call   804945a <explode_bomb>
 8048f75:	8b 44 24 0c          	mov    0xc(%esp),%eax
 8048f79:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8048f80:	74 05                	je     8048f87 <phase_7+0x7b>
 8048f82:	e8 79 f8 ff ff       	call   8048800 <__stack_chk_fail@plt>
 8048f87:	83 c4 18             	add    $0x18,%esp
 8048f8a:	5b                   	pop    %ebx
 8048f8b:	c3                   	ret    
//jfkhel

08048f8c <phase_8>:
 8048f8c:	56                   	push   %esi
 8048f8d:	53                   	push   %ebx
 8048f8e:	83 ec 4c             	sub    $0x4c,%esp //esp -= 76
 8048f91:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8048f97:	89 44 24 44          	mov    %eax,0x44(%esp) //esp[44] = eax
 8048f9b:	31 c0                	xor    %eax,%eax //eax = 0
 8048f9d:	8d 44 24 14          	lea    0x14(%esp),%eax //eax = esp[14]
 8048fa1:	50                   	push   %eax
 8048fa2:	ff 74 24 5c          	pushl  0x5c(%esp)
 8048fa6:	e8 ec 04 00 00       	call   8049497 <read_six_numbers> //need to enter six numbers
 8048fab:	83 c4 10             	add    $0x10,%esp //esp += 10
 8048fae:	be 00 00 00 00       	mov    $0x0,%esi //esi = 0

//loop -1
 8048fb3:	8b 44 b4 0c          	mov    0xc(%esp,%esi,4),%eax //eax = each number you entered, one by one
 8048fb7:	83 e8 01             	sub    $0x1,%eax			//eax --
 8048fba:	83 f8 05             	cmp    $0x5,%eax			
 8048fbd:	76 05                	jbe    8048fc4 <phase_8+0x38> //does not explode if your entry is <= 6
 8048fbf:	e8 96 04 00 00       	call   804945a <explode_bomb>
 8048fc4:	83 c6 01             	add    $0x1,%esi //esi++
 8048fc7:	83 fe 06             	cmp    $0x6,%esi //compares esi to 6; stops looping once it's seen all your entries
 8048fca:	74 33                	je     8048fff <phase_8+0x73> //jumps to loop 2 if esi == 6
 8048fcc:	89 f3                	mov    %esi,%ebx //ebx = esi
//seems like it makes sure you didn't enter a number greater than 6

//loop 0
 8048fce:	8b 44 9c 0c          	mov    0xc(%esp,%ebx,4),%eax
 8048fd2:	39 44 b4 08          	cmp    %eax,0x8(%esp,%esi,4) //compares 8 + esp + (esi*4) to 13 + esp + (ebx*4)
 8048fd6:	75 05                	jne    8048fdd <phase_8+0x51> //jumps past explosion if not equal
 8048fd8:	e8 7d 04 00 00       	call   804945a <explode_bomb>
 8048fdd:	83 c3 01             	add    $0x1,%ebx			//ebx++
 8048fe0:	83 fb 05             	cmp    $0x5,%ebx			
 8048fe3:	7e e9                	jle    8048fce <phase_8+0x42> //continues loop until ebx = 6
//seems like it checks to make sure there are no duplicates in the entry

//need to enter 1 2 3 4 5 6 in some specific order

 8048fe5:	eb cc                	jmp    8048fb3 <phase_8+0x27> //jumps to loop -1

//loop 1
 8048fe7:	8b 52 08             	mov    0x8(%edx),%edx //adds 12 to edx
 8048fea:	83 c0 01             	add    $0x1,%eax //eax++
 8048fed:	39 c8                	cmp    %ecx,%eax 
 8048fef:	75 f6                	jne    8048fe7 <phase_8+0x5b> //goes to loop 2 when eax == ecx
//adds 12 to edx n times, where n is the value of the number you entered
//makes a list where each entry is 134,533,460 + 12*(your number), six entries long
//6 points to 252
//5 points to 211
//4 points to 704
//3 points to 89
//2 points to 285
//1 points to 999

//loop 2
 8048ff1:	89 54 b4 24          	mov    %edx,0x24(%esp,%esi,4)
 8048ff5:	83 c3 01             	add    $0x1,%ebx				//ebx++
 8048ff8:	83 fb 06             	cmp    $0x6,%ebx
 8048ffb:	75 07                	jne    8049004 <phase_8+0x78> //jumps to YYY if ebx != 6
 8048ffd:	eb 1c                	jmp    804901b <phase_8+0x8f> //leaves loop 2 if ebx == 6, once it's seen all your entries
 8048fff:	bb 00 00 00 00       	mov    $0x0,%ebx			//jumped to by jump (1); ebx = 0
 8049004:	89 de                	mov    %ebx,%esi			//YYY; esi = ebx
 8049006:	8b 4c 9c 0c          	mov    0xc(%esp,%ebx,4),%ecx //ecx = a number you entered
 804900a:	b8 01 00 00 00       	mov    $0x1,%eax			//eax = 1
 804900f:	ba 54 d1 04 08       	mov    $0x804d154,%edx		//edx = 134533460; *this address = 999
 8049014:	83 f9 01             	cmp    $0x1,%ecx			
 8049017:	7f ce                	jg     8048fe7 <phase_8+0x5b> //if ecx > 1, jumps to loop 1
 8049019:	eb d6                	jmp    8048ff1 <phase_8+0x65> //if ecx <= 1, jumps to loop 2
//iterates through all 6 entries again, not sure what it's doing or checking for
//only goes to loop 1 when the entry that's being looked at isn't 1


 804901b:	8b 5c 24 24          	mov    0x24(%esp),%ebx //XXX; ebx = esp[24]; 252 when entry order is 6 3 4 2 1 5, which is the first number
 804901f:	8d 44 24 24          	lea    0x24(%esp),%eax //eax = &esp[24]; 252 as well
 8049023:	8d 74 24 38          	lea    0x38(%esp),%esi //esi = &esp[38]; 211 when entry order is 6 3 4 2 1 5, which is the last number
 8049027:	89 d9                	mov    %ebx,%ecx		//ecx = ebx = esp[24]; 252

//loop 3
 8049029:	8b 50 04             	mov    0x4(%eax),%edx //edx = eax[4]; starts with 89, which is entry 2, and walks forward 
 804902c:	89 51 08             	mov    %edx,0x8(%ecx) //points to the thing that points to edx
 804902f:	83 c0 04             	add    $0x4,%eax //eax += 4
 8049032:	89 d1                	mov    %edx,%ecx //ecx = edx
 8049034:	39 f0                	cmp    %esi,%eax
 8049036:	75 f1                	jne    8049029 <phase_8+0x9d> //exits loop when eax == esi; runs 6 times, once for each input

 8049038:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx) //edx[2] = 0
 804903f:	be 05 00 00 00       	mov    $0x5,%esi //esi = 5

//loop 4
 8049044:	8b 43 08             	mov    0x8(%ebx),%eax //eax = ebx[2]
 8049047:	8b 00                	mov    (%eax),%eax	 //eax = *eax
 8049049:	39 03                	cmp    %eax,(%ebx)
 804904b:	7d 05                	jge    8049052 <phase_8+0xc6> //jumps past the explosion if the value at *ebx >= eax
 804904d:	e8 08 04 00 00       	call   804945a <explode_bomb>
 8049052:	8b 5b 08             	mov    0x8(%ebx),%ebx
 8049055:	83 ee 01             	sub    $0x1,%esi //esi --
 8049058:	75 ea                	jne    8049044 <phase_8+0xb8> //loops until eax == ebx, or unti eax underflows and triggers the explosion

 804905a:	8b 44 24 3c          	mov    0x3c(%esp),%eax
 804905e:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 8049065:	74 05                	je     804906c <phase_8+0xe0>
 8049067:	e8 94 f7 ff ff       	call   8048800 <__stack_chk_fail@plt>
 804906c:	83 c4 44             	add    $0x44,%esp
 804906f:	5b                   	pop    %ebx
 8049070:	5e                   	pop    %esi
 8049071:	c3                   	ret    
//wants 6 unique numbers, each less than or equal to 6
//maps each number to another one, similar to the string encryption in phase 7
//looks for the post-mapped list to be in descending order; 1 4 2 6 5 3 which maps to 999 704 285 252 211 89


08049072 <fun9>: (pointer, long) returns an int; want to return 4
//edx is the address (0x804d0a0 to start; *edx = 486), ecx is your input
//486 is the value of the root node
//you need to input a number that's in height four
 8049072:	53                   	push   %ebx
 8049073:	83 ec 08             	sub    $0x8,%esp //esp -= 8
 8049076:	8b 54 24 10          	mov    0x10(%esp),%edx 
 804907a:	8b 4c 24 14          	mov    0x14(%esp),%ecx
 804907e:	85 d2                	test   %edx,%edx
 8049080:	74 37                	je     80490b9 <fun9+0x47> //if edx == 0, return -1; when you go too deep in the bst
 8049082:	8b 1a                	mov    (%edx),%ebx		//ebx = *ebx; starts as = 486
 8049084:	39 cb                	cmp    %ecx,%ebx
 8049086:	7e 13                	jle    804909b <fun9+0x29> //jumps to XXX if ebx <= ecx; ebx will get changed until it is less than your entry
															  //if ebx < ecx calls edx[2] and input; goes right; returns 2eax+1
															//if ebx > ecx calls edx[1] and input; goes left; returns 2eax
															//if ebx == ecx return 0
 8049088:	83 ec 08             	sub    $0x8,%esp		//esp -= 8
 804908b:	51                   	push   %ecx
 804908c:	ff 72 04             	pushl  0x4(%edx)
 804908f:	e8 de ff ff ff       	call   8049072 <fun9> //calls recursively with edx[1] and ecx / an address+1 and your input
 8049094:	83 c4 10             	add    $0x10,%esp	//esp += 10
 8049097:	01 c0                	add    %eax,%eax	//eax += eax
 8049099:	eb 23                	jmp    80490be <fun9+0x4c> //exits function, returns 2*eax
 804909b:	b8 00 00 00 00       	mov    $0x0,%eax			//XXX eax = 0
 80490a0:	39 cb                	cmp    %ecx,%ebx
 80490a2:	74 1a                	je     80490be <fun9+0x4c> //exits function if ecx == ebx, returns eax
 80490a4:	83 ec 08             	sub    $0x8,%esp	//esp -= 8
 80490a7:	51                   	push   %ecx	
 80490a8:	ff 72 08             	pushl  0x8(%edx)
 80490ab:	e8 c2 ff ff ff       	call   8049072 <fun9> //calls recursively with edx[2] and ecx, and address + 2 and your input
 80490b0:	83 c4 10             	add    $0x10,%esp 	//esp += 10
 80490b3:	8d 44 00 01          	lea    0x1(%eax,%eax,1),%eax //eax = 1 + eax + (eax*1) = 2*eax+1
 80490b7:	eb 05                	jmp    80490be <fun9+0x4c> //returns eax
 80490b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax //eax = -1
 80490be:	83 c4 08             	add    $0x8,%esp		//esp += 8
 80490c1:	5b                   	pop    %ebx
 80490c2:	c3                   	ret    


//want to return 2*eax+1 and then 2*eax then 2*eax then eax
//left left right, because recursion
//map out the tree to find proper entry (205)
080490c3 <phase_9>:
 80490c3:	53                   	push   %ebx 	//push ebx onto the stack; stack is ebx
 80490c4:	83 ec 0c             	sub    $0xc,%esp //esp -= 12
 80490c7:	6a 0a                	push   $0xa 	//push 10 onto the stack; stack is 10->ebx
 80490c9:	6a 00                	push   $0x0		//push 0 onto the stack; stack is 0->10->ebx
 80490cb:	ff 74 24 1c          	pushl  0x1c(%esp)//pushes esp[28] onto the stack; stack is esp[28]->0->10->ebx
 80490cf:	e8 4c f8 ff ff       	call   8048920 <strtol@plt> //makes eax = your input
 80490d4:	89 c3                	mov    %eax,%ebx //ebx = eax; ebx = your input
 80490d6:	8d 40 ff             	lea    -0x1(%eax),%eax //eax--
 80490d9:	83 c4 10             	add    $0x10,%esp	//esp += 16
 80490dc:	3d ec 03 00 00       	cmp    $0x3ec,%eax	//compares eax to 1004
 80490e1:	76 05                	jbe    80490e8 <phase_9+0x25> //eax must be <= 1004
 80490e3:	e8 72 03 00 00       	call   804945a <explode_bomb>
 80490e8:	83 ec 08             	sub    $0x8,%esp	//esp -= 8
 80490eb:	53                   	push   %ebx //pushes ebx  onto the stack
 80490ec:	68 a0 d0 04 08       	push   $0x804d0a0	//pushes this onto the stack; *this is 486
 80490f1:	e8 7c ff ff ff       	call   8049072 <fun9> //calls recursive function; must return 4
 80490f6:	83 c4 10             	add    $0x10,%esp	//esp += 16
 80490f9:	83 f8 04             	cmp    $0x4,%eax	//compares eax to 4
 80490fc:	74 05                	je     8049103 <phase_9+0x40>	//bomb explodes if eax != 4
 80490fe:	e8 57 03 00 00       	call   804945a <explode_bomb>
 8049103:	83 c4 08             	add    $0x8,%esp 
 8049106:	5b                   	pop    %ebx
 8049107:	c3                   	ret    
//42 returns -16
08049108 <sig_handler>:
 8049108:	83 ec 18             	sub    $0x18,%esp
 804910b:	68 f0 a3 04 08       	push   $0x804a3f0
 8049110:	e8 3b f7 ff ff       	call   8048850 <puts@plt>
 8049115:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
 804911c:	e8 bf f6 ff ff       	call   80487e0 <sleep@plt>
 8049121:	83 c4 08             	add    $0x8,%esp
 8049124:	68 4d a5 04 08       	push   $0x804a54d
 8049129:	6a 01                	push   $0x1
 804912b:	e8 b0 f7 ff ff       	call   80488e0 <__printf_chk@plt>
 8049130:	83 c4 04             	add    $0x4,%esp
 8049133:	ff 35 e4 d7 04 08    	pushl  0x804d7e4
 8049139:	e8 72 f6 ff ff       	call   80487b0 <fflush@plt>
 804913e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8049145:	e8 96 f6 ff ff       	call   80487e0 <sleep@plt>
 804914a:	c7 04 24 55 a5 04 08 	movl   $0x804a555,(%esp)
 8049151:	e8 fa f6 ff ff       	call   8048850 <puts@plt>
 8049156:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
 804915d:	e8 0e f7 ff ff       	call   8048870 <exit@plt>

08049162 <invalid_phase>:
 8049162:	83 ec 10             	sub    $0x10,%esp
 8049165:	ff 74 24 14          	pushl  0x14(%esp)
 8049169:	68 5d a5 04 08       	push   $0x804a55d
 804916e:	6a 01                	push   $0x1
 8049170:	e8 6b f7 ff ff       	call   80488e0 <__printf_chk@plt>
 8049175:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 804917c:	e8 ef f6 ff ff       	call   8048870 <exit@plt>

08049181 <string_length>:
 8049181:	8b 54 24 04          	mov    0x4(%esp),%edx
 8049185:	80 3a 00             	cmpb   $0x0,(%edx)
 8049188:	74 10                	je     804919a <string_length+0x19>
 804918a:	b8 00 00 00 00       	mov    $0x0,%eax
 804918f:	83 c0 01             	add    $0x1,%eax
 8049192:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
 8049196:	75 f7                	jne    804918f <string_length+0xe>
 8049198:	f3 c3                	repz ret 
 804919a:	b8 00 00 00 00       	mov    $0x0,%eax
 804919f:	c3                   	ret    

080491a0 <strings_not_equal>:
 80491a0:	57                   	push   %edi
 80491a1:	56                   	push   %esi
 80491a2:	53                   	push   %ebx
 80491a3:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 80491a7:	8b 74 24 14          	mov    0x14(%esp),%esi
 80491ab:	53                   	push   %ebx
 80491ac:	e8 d0 ff ff ff       	call   8049181 <string_length>
 80491b1:	89 c7                	mov    %eax,%edi
 80491b3:	89 34 24             	mov    %esi,(%esp)
 80491b6:	e8 c6 ff ff ff       	call   8049181 <string_length>
 80491bb:	83 c4 04             	add    $0x4,%esp
 80491be:	ba 01 00 00 00       	mov    $0x1,%edx
 80491c3:	39 c7                	cmp    %eax,%edi
 80491c5:	75 38                	jne    80491ff <strings_not_equal+0x5f>
 80491c7:	0f b6 03             	movzbl (%ebx),%eax
 80491ca:	84 c0                	test   %al,%al
 80491cc:	74 1e                	je     80491ec <strings_not_equal+0x4c>
 80491ce:	3a 06                	cmp    (%esi),%al
 80491d0:	74 06                	je     80491d8 <strings_not_equal+0x38>
 80491d2:	eb 1f                	jmp    80491f3 <strings_not_equal+0x53>
 80491d4:	3a 06                	cmp    (%esi),%al
 80491d6:	75 22                	jne    80491fa <strings_not_equal+0x5a>
 80491d8:	83 c3 01             	add    $0x1,%ebx
 80491db:	83 c6 01             	add    $0x1,%esi
 80491de:	0f b6 03             	movzbl (%ebx),%eax
 80491e1:	84 c0                	test   %al,%al
 80491e3:	75 ef                	jne    80491d4 <strings_not_equal+0x34>
 80491e5:	ba 00 00 00 00       	mov    $0x0,%edx
 80491ea:	eb 13                	jmp    80491ff <strings_not_equal+0x5f>
 80491ec:	ba 00 00 00 00       	mov    $0x0,%edx
 80491f1:	eb 0c                	jmp    80491ff <strings_not_equal+0x5f>
 80491f3:	ba 01 00 00 00       	mov    $0x1,%edx
 80491f8:	eb 05                	jmp    80491ff <strings_not_equal+0x5f>
 80491fa:	ba 01 00 00 00       	mov    $0x1,%edx
 80491ff:	89 d0                	mov    %edx,%eax
 8049201:	5b                   	pop    %ebx
 8049202:	5e                   	pop    %esi
 8049203:	5f                   	pop    %edi
 8049204:	c3                   	ret    

08049205 <initialize_bomb>:
 8049205:	56                   	push   %esi
 8049206:	53                   	push   %ebx
 8049207:	81 ec 5c 20 00 00    	sub    $0x205c,%esp
 804920d:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049213:	89 84 24 54 20 00 00 	mov    %eax,0x2054(%esp)
 804921a:	31 c0                	xor    %eax,%eax
 804921c:	68 08 91 04 08       	push   $0x8049108
 8049221:	6a 02                	push   $0x2
 8049223:	e8 a8 f5 ff ff       	call   80487d0 <signal@plt>
 8049228:	83 c4 08             	add    $0x8,%esp
 804922b:	6a 40                	push   $0x40
 804922d:	8d 44 24 18          	lea    0x18(%esp),%eax
 8049231:	50                   	push   %eax
 8049232:	e8 e9 f5 ff ff       	call   8048820 <gethostname@plt>
 8049237:	83 c4 10             	add    $0x10,%esp
 804923a:	85 c0                	test   %eax,%eax
 804923c:	75 14                	jne    8049252 <initialize_bomb+0x4d>
 804923e:	a1 c0 d5 04 08       	mov    0x804d5c0,%eax
 8049243:	bb c4 d5 04 08       	mov    $0x804d5c4,%ebx
 8049248:	8d 74 24 0c          	lea    0xc(%esp),%esi
 804924c:	85 c0                	test   %eax,%eax
 804924e:	75 1b                	jne    804926b <initialize_bomb+0x66>
 8049250:	eb 56                	jmp    80492a8 <initialize_bomb+0xa3>
 8049252:	83 ec 0c             	sub    $0xc,%esp
 8049255:	68 28 a4 04 08       	push   $0x804a428
 804925a:	e8 f1 f5 ff ff       	call   8048850 <puts@plt>
 804925f:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8049266:	e8 05 f6 ff ff       	call   8048870 <exit@plt>
 804926b:	83 ec 08             	sub    $0x8,%esp
 804926e:	56                   	push   %esi
 804926f:	50                   	push   %eax
 8049270:	e8 2b f6 ff ff       	call   80488a0 <strcasecmp@plt>
 8049275:	83 c4 10             	add    $0x10,%esp
 8049278:	85 c0                	test   %eax,%eax
 804927a:	74 45                	je     80492c1 <initialize_bomb+0xbc>
 804927c:	83 c3 04             	add    $0x4,%ebx
 804927f:	8b 43 fc             	mov    -0x4(%ebx),%eax
 8049282:	85 c0                	test   %eax,%eax
 8049284:	75 e5                	jne    804926b <initialize_bomb+0x66>
 8049286:	eb 20                	jmp    80492a8 <initialize_bomb+0xa3>
 8049288:	83 ec 04             	sub    $0x4,%esp
 804928b:	8d 44 24 50          	lea    0x50(%esp),%eax
 804928f:	50                   	push   %eax
 8049290:	68 6e a5 04 08       	push   $0x804a56e
 8049295:	6a 01                	push   $0x1
 8049297:	e8 44 f6 ff ff       	call   80488e0 <__printf_chk@plt>
 804929c:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 80492a3:	e8 c8 f5 ff ff       	call   8048870 <exit@plt>
 80492a8:	83 ec 0c             	sub    $0xc,%esp
 80492ab:	68 60 a4 04 08       	push   $0x804a460
 80492b0:	e8 9b f5 ff ff       	call   8048850 <puts@plt>
 80492b5:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 80492bc:	e8 af f5 ff ff       	call   8048870 <exit@plt>
 80492c1:	83 ec 0c             	sub    $0xc,%esp
 80492c4:	8d 44 24 58          	lea    0x58(%esp),%eax
 80492c8:	50                   	push   %eax
 80492c9:	e8 29 0c 00 00       	call   8049ef7 <init_driver>
 80492ce:	83 c4 10             	add    $0x10,%esp
 80492d1:	85 c0                	test   %eax,%eax
 80492d3:	78 b3                	js     8049288 <initialize_bomb+0x83>
 80492d5:	8b 84 24 4c 20 00 00 	mov    0x204c(%esp),%eax
 80492dc:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 80492e3:	74 05                	je     80492ea <initialize_bomb+0xe5>
 80492e5:	e8 16 f5 ff ff       	call   8048800 <__stack_chk_fail@plt>
 80492ea:	81 c4 54 20 00 00    	add    $0x2054,%esp
 80492f0:	5b                   	pop    %ebx
 80492f1:	5e                   	pop    %esi
 80492f2:	c3                   	ret    

080492f3 <initialize_bomb_solve>:
 80492f3:	f3 c3                	repz ret 

080492f5 <blank_line>:
 80492f5:	56                   	push   %esi
 80492f6:	53                   	push   %ebx
 80492f7:	83 ec 04             	sub    $0x4,%esp
 80492fa:	8b 74 24 10          	mov    0x10(%esp),%esi
 80492fe:	eb 14                	jmp    8049314 <blank_line+0x1f>
 8049300:	e8 4b f6 ff ff       	call   8048950 <__ctype_b_loc@plt>
 8049305:	83 c6 01             	add    $0x1,%esi
 8049308:	0f be db             	movsbl %bl,%ebx
 804930b:	8b 00                	mov    (%eax),%eax
 804930d:	f6 44 58 01 20       	testb  $0x20,0x1(%eax,%ebx,2)
 8049312:	74 0e                	je     8049322 <blank_line+0x2d>
 8049314:	0f b6 1e             	movzbl (%esi),%ebx
 8049317:	84 db                	test   %bl,%bl
 8049319:	75 e5                	jne    8049300 <blank_line+0xb>
 804931b:	b8 01 00 00 00       	mov    $0x1,%eax
 8049320:	eb 05                	jmp    8049327 <blank_line+0x32>
 8049322:	b8 00 00 00 00       	mov    $0x0,%eax
 8049327:	83 c4 04             	add    $0x4,%esp
 804932a:	5b                   	pop    %ebx
 804932b:	5e                   	pop    %esi
 804932c:	c3                   	ret    

0804932d <skip>:
 804932d:	53                   	push   %ebx
 804932e:	83 ec 08             	sub    $0x8,%esp
 8049331:	83 ec 04             	sub    $0x4,%esp
 8049334:	ff 35 f0 d7 04 08    	pushl  0x804d7f0
 804933a:	6a 50                	push   $0x50
 804933c:	a1 ec d7 04 08       	mov    0x804d7ec,%eax
 8049341:	8d 04 80             	lea    (%eax,%eax,4),%eax
 8049344:	c1 e0 04             	shl    $0x4,%eax
 8049347:	05 00 d8 04 08       	add    $0x804d800,%eax
 804934c:	50                   	push   %eax
 804934d:	e8 6e f4 ff ff       	call   80487c0 <fgets@plt>
 8049352:	89 c3                	mov    %eax,%ebx
 8049354:	83 c4 10             	add    $0x10,%esp
 8049357:	85 c0                	test   %eax,%eax
 8049359:	74 10                	je     804936b <skip+0x3e>
 804935b:	83 ec 0c             	sub    $0xc,%esp
 804935e:	50                   	push   %eax
 804935f:	e8 91 ff ff ff       	call   80492f5 <blank_line>
 8049364:	83 c4 10             	add    $0x10,%esp
 8049367:	85 c0                	test   %eax,%eax
 8049369:	75 c6                	jne    8049331 <skip+0x4>
 804936b:	89 d8                	mov    %ebx,%eax
 804936d:	83 c4 08             	add    $0x8,%esp
 8049370:	5b                   	pop    %ebx
 8049371:	c3                   	ret    

08049372 <send_msg>:
 8049372:	57                   	push   %edi
 8049373:	53                   	push   %ebx
 8049374:	81 ec 14 40 00 00    	sub    $0x4014,%esp
 804937a:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049380:	89 84 24 0c 40 00 00 	mov    %eax,0x400c(%esp)
 8049387:	31 c0                	xor    %eax,%eax
 8049389:	8b 1d ec d7 04 08    	mov    0x804d7ec,%ebx
 804938f:	8d 54 9b fb          	lea    -0x5(%ebx,%ebx,4),%edx
 8049393:	c1 e2 04             	shl    $0x4,%edx
 8049396:	81 c2 00 d8 04 08    	add    $0x804d800,%edx
 804939c:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 80493a1:	89 d7                	mov    %edx,%edi
 80493a3:	f2 ae                	repnz scas %es:(%edi),%al
 80493a5:	f7 d1                	not    %ecx
 80493a7:	83 c1 63             	add    $0x63,%ecx
 80493aa:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
 80493b0:	76 1b                	jbe    80493cd <send_msg+0x5b>
 80493b2:	83 ec 08             	sub    $0x8,%esp
 80493b5:	68 98 a4 04 08       	push   $0x804a498
 80493ba:	6a 01                	push   $0x1
 80493bc:	e8 1f f5 ff ff       	call   80488e0 <__printf_chk@plt>
 80493c1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 80493c8:	e8 a3 f4 ff ff       	call   8048870 <exit@plt>
 80493cd:	83 bc 24 20 40 00 00 	cmpl   $0x0,0x4020(%esp)
 80493d4:	00 
 80493d5:	b9 90 a5 04 08       	mov    $0x804a590,%ecx
 80493da:	b8 88 a5 04 08       	mov    $0x804a588,%eax
 80493df:	0f 44 c1             	cmove  %ecx,%eax
 80493e2:	52                   	push   %edx
 80493e3:	53                   	push   %ebx
 80493e4:	50                   	push   %eax
 80493e5:	ff 35 a0 d5 04 08    	pushl  0x804d5a0
 80493eb:	68 99 a5 04 08       	push   $0x804a599
 80493f0:	68 00 20 00 00       	push   $0x2000
 80493f5:	6a 01                	push   $0x1
 80493f7:	8d 5c 24 28          	lea    0x28(%esp),%ebx
 80493fb:	53                   	push   %ebx
 80493fc:	e8 5f f5 ff ff       	call   8048960 <__sprintf_chk@plt>
 8049401:	83 c4 20             	add    $0x20,%esp
 8049404:	8d 84 24 0c 20 00 00 	lea    0x200c(%esp),%eax
 804940b:	50                   	push   %eax
 804940c:	6a 00                	push   $0x0
 804940e:	53                   	push   %ebx
 804940f:	68 a0 d1 04 08       	push   $0x804d1a0
 8049414:	e8 b0 0c 00 00       	call   804a0c9 <driver_post>
 8049419:	83 c4 10             	add    $0x10,%esp
 804941c:	85 c0                	test   %eax,%eax
 804941e:	79 1c                	jns    804943c <send_msg+0xca>
 8049420:	83 ec 0c             	sub    $0xc,%esp
 8049423:	8d 84 24 18 20 00 00 	lea    0x2018(%esp),%eax
 804942a:	50                   	push   %eax
 804942b:	e8 20 f4 ff ff       	call   8048850 <puts@plt>
 8049430:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8049437:	e8 34 f4 ff ff       	call   8048870 <exit@plt>
 804943c:	8b 84 24 0c 40 00 00 	mov    0x400c(%esp),%eax
 8049443:	65 33 05 14 00 00 00 	xor    %gs:0x14,%eax
 804944a:	74 05                	je     8049451 <send_msg+0xdf>
 804944c:	e8 af f3 ff ff       	call   8048800 <__stack_chk_fail@plt>
 8049451:	81 c4 14 40 00 00    	add    $0x4014,%esp
 8049457:	5b                   	pop    %ebx
 8049458:	5f                   	pop    %edi
 8049459:	c3                   	ret    

0804945a <explode_bomb>:
 804945a:	83 ec 18             	sub    $0x18,%esp
 804945d:	68 a5 a5 04 08       	push   $0x804a5a5
 8049462:	e8 e9 f3 ff ff       	call   8048850 <puts@plt>
 8049467:	c7 04 24 ae a5 04 08 	movl   $0x804a5ae,(%esp)
 804946e:	e8 dd f3 ff ff       	call   8048850 <puts@plt>
 8049473:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 804947a:	e8 f3 fe ff ff       	call   8049372 <send_msg>
 804947f:	c7 04 24 bc a4 04 08 	movl   $0x804a4bc,(%esp)
 8049486:	e8 c5 f3 ff ff       	call   8048850 <puts@plt>
 804948b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8049492:	e8 d9 f3 ff ff       	call   8048870 <exit@plt>

08049497 <read_six_numbers>:
 8049497:	83 ec 0c             	sub    $0xc,%esp
 804949a:	8b 44 24 14          	mov    0x14(%esp),%eax
 804949e:	8d 50 14             	lea    0x14(%eax),%edx
 80494a1:	52                   	push   %edx
 80494a2:	8d 50 10             	lea    0x10(%eax),%edx
 80494a5:	52                   	push   %edx
 80494a6:	8d 50 0c             	lea    0xc(%eax),%edx
 80494a9:	52                   	push   %edx
 80494aa:	8d 50 08             	lea    0x8(%eax),%edx
 80494ad:	52                   	push   %edx
 80494ae:	8d 50 04             	lea    0x4(%eax),%edx
 80494b1:	52                   	push   %edx
 80494b2:	50                   	push   %eax
 80494b3:	68 c5 a5 04 08       	push   $0x804a5c5
 80494b8:	ff 74 24 2c          	pushl  0x2c(%esp)
 80494bc:	e8 ef f3 ff ff       	call   80488b0 <__isoc99_sscanf@plt>
 80494c1:	83 c4 20             	add    $0x20,%esp
 80494c4:	83 f8 05             	cmp    $0x5,%eax
 80494c7:	7f 05                	jg     80494ce <read_six_numbers+0x37>
 80494c9:	e8 8c ff ff ff       	call   804945a <explode_bomb>
 80494ce:	83 c4 0c             	add    $0xc,%esp
 80494d1:	c3                   	ret    

080494d2 <read_line>:
 80494d2:	57                   	push   %edi
 80494d3:	56                   	push   %esi
 80494d4:	53                   	push   %ebx
 80494d5:	e8 53 fe ff ff       	call   804932d <skip>
 80494da:	85 c0                	test   %eax,%eax
 80494dc:	75 70                	jne    804954e <read_line+0x7c>
 80494de:	a1 e0 d7 04 08       	mov    0x804d7e0,%eax
 80494e3:	39 05 f0 d7 04 08    	cmp    %eax,0x804d7f0
 80494e9:	75 19                	jne    8049504 <read_line+0x32>
 80494eb:	83 ec 0c             	sub    $0xc,%esp
 80494ee:	68 d7 a5 04 08       	push   $0x804a5d7
 80494f3:	e8 58 f3 ff ff       	call   8048850 <puts@plt>
 80494f8:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 80494ff:	e8 6c f3 ff ff       	call   8048870 <exit@plt>
 8049504:	83 ec 0c             	sub    $0xc,%esp
 8049507:	68 f5 a5 04 08       	push   $0x804a5f5
 804950c:	e8 1f f3 ff ff       	call   8048830 <getenv@plt>
 8049511:	83 c4 10             	add    $0x10,%esp
 8049514:	85 c0                	test   %eax,%eax
 8049516:	74 0a                	je     8049522 <read_line+0x50>
 8049518:	83 ec 0c             	sub    $0xc,%esp
 804951b:	6a 00                	push   $0x0
 804951d:	e8 4e f3 ff ff       	call   8048870 <exit@plt>
 8049522:	a1 e0 d7 04 08       	mov    0x804d7e0,%eax
 8049527:	a3 f0 d7 04 08       	mov    %eax,0x804d7f0
 804952c:	e8 fc fd ff ff       	call   804932d <skip>
 8049531:	85 c0                	test   %eax,%eax
 8049533:	75 19                	jne    804954e <read_line+0x7c>
 8049535:	83 ec 0c             	sub    $0xc,%esp
 8049538:	68 d7 a5 04 08       	push   $0x804a5d7
 804953d:	e8 0e f3 ff ff       	call   8048850 <puts@plt>
 8049542:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8049549:	e8 22 f3 ff ff       	call   8048870 <exit@plt>
 804954e:	8b 15 ec d7 04 08    	mov    0x804d7ec,%edx
 8049554:	8d 1c 92             	lea    (%edx,%edx,4),%ebx
 8049557:	c1 e3 04             	shl    $0x4,%ebx
 804955a:	81 c3 00 d8 04 08    	add    $0x804d800,%ebx
 8049560:	b8 00 00 00 00       	mov    $0x0,%eax
 8049565:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 804956a:	89 df                	mov    %ebx,%edi
 804956c:	f2 ae                	repnz scas %es:(%edi),%al
 804956e:	f7 d1                	not    %ecx
 8049570:	83 e9 01             	sub    $0x1,%ecx
 8049573:	83 f9 4e             	cmp    $0x4e,%ecx
 8049576:	7e 36                	jle    80495ae <read_line+0xdc>
 8049578:	83 ec 0c             	sub    $0xc,%esp
 804957b:	68 00 a6 04 08       	push   $0x804a600
 8049580:	e8 cb f2 ff ff       	call   8048850 <puts@plt>
 8049585:	a1 ec d7 04 08       	mov    0x804d7ec,%eax
 804958a:	8d 50 01             	lea    0x1(%eax),%edx
 804958d:	89 15 ec d7 04 08    	mov    %edx,0x804d7ec
 8049593:	6b c0 50             	imul   $0x50,%eax,%eax
 8049596:	05 00 d8 04 08       	add    $0x804d800,%eax
 804959b:	be 1b a6 04 08       	mov    $0x804a61b,%esi
 80495a0:	b9 04 00 00 00       	mov    $0x4,%ecx
 80495a5:	89 c7                	mov    %eax,%edi
 80495a7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 80495a9:	e8 ac fe ff ff       	call   804945a <explode_bomb>
 80495ae:	8d 04 92             	lea    (%edx,%edx,4),%eax
 80495b1:	c1 e0 04             	shl    $0x4,%eax
 80495b4:	c6 84 01 ff d7 04 08 	movb   $0x0,0x804d7ff(%ecx,%eax,1)
 80495bb:	00 
 80495bc:	83 c2 01             	add    $0x1,%edx
 80495bf:	89 15 ec d7 04 08    	mov    %edx,0x804d7ec
 80495c5:	89 d8                	mov    %ebx,%eax
 80495c7:	5b                   	pop    %ebx
 80495c8:	5e                   	pop    %esi
 80495c9:	5f                   	pop    %edi
 80495ca:	c3                   	ret    

080495cb <phase_defused>:
 80495cb:	83 ec 18             	sub    $0x18,%esp
 80495ce:	6a 01                	push   $0x1
 80495d0:	e8 9d fd ff ff       	call   8049372 <send_msg>
 80495d5:	83 c4 10             	add    $0x10,%esp
 80495d8:	83 3d ec d7 04 08 09 	cmpl   $0x9,0x804d7ec
 80495df:	75 1c                	jne    80495fd <phase_defused+0x32>
 80495e1:	83 ec 0c             	sub    $0xc,%esp
 80495e4:	68 e0 a4 04 08       	push   $0x804a4e0
 80495e9:	e8 62 f2 ff ff       	call   8048850 <puts@plt>
 80495ee:	c7 04 24 0c a5 04 08 	movl   $0x804a50c,(%esp)
 80495f5:	e8 56 f2 ff ff       	call   8048850 <puts@plt>
 80495fa:	83 c4 10             	add    $0x10,%esp
 80495fd:	83 c4 0c             	add    $0xc,%esp
 8049600:	c3                   	ret    

08049601 <sigalrm_handler>:
 8049601:	83 ec 0c             	sub    $0xc,%esp
 8049604:	6a 00                	push   $0x0
 8049606:	68 14 aa 04 08       	push   $0x804aa14
 804960b:	6a 01                	push   $0x1
 804960d:	ff 35 c0 d7 04 08    	pushl  0x804d7c0
 8049613:	e8 e8 f2 ff ff       	call   8048900 <__fprintf_chk@plt>
 8049618:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 804961f:	e8 4c f2 ff ff       	call   8048870 <exit@plt>

08049624 <rio_readlineb>:
 8049624:	55                   	push   %ebp
 8049625:	57                   	push   %edi
 8049626:	56                   	push   %esi
 8049627:	53                   	push   %ebx
 8049628:	83 ec 2c             	sub    $0x2c,%esp
 804962b:	89 d7                	mov    %edx,%edi
 804962d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
 8049631:	65 8b 15 14 00 00 00 	mov    %gs:0x14,%edx
 8049638:	89 54 24 1c          	mov    %edx,0x1c(%esp)
 804963c:	31 d2                	xor    %edx,%edx
 804963e:	83 f9 01             	cmp    $0x1,%ecx
 8049641:	76 79                	jbe    80496bc <rio_readlineb+0x98>
 8049643:	89 c3                	mov    %eax,%ebx
 8049645:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 8049649:	bd 01 00 00 00       	mov    $0x1,%ebp
 804964e:	8d 73 0c             	lea    0xc(%ebx),%esi
 8049651:	eb 2d                	jmp    8049680 <rio_readlineb+0x5c>
 8049653:	83 ec 04             	sub    $0x4,%esp
 8049656:	68 00 20 00 00       	push   $0x2000
 804965b:	56                   	push   %esi
 804965c:	ff 33                	pushl  (%ebx)
 804965e:	e8 3d f1 ff ff       	call   80487a0 <read@plt>
 8049663:	89 43 04             	mov    %eax,0x4(%ebx)
 8049666:	83 c4 10             	add    $0x10,%esp
 8049669:	85 c0                	test   %eax,%eax
 804966b:	79 0c                	jns    8049679 <rio_readlineb+0x55>
 804966d:	e8 5e f2 ff ff       	call   80488d0 <__errno_location@plt>
 8049672:	83 38 04             	cmpl   $0x4,(%eax)
 8049675:	74 09                	je     8049680 <rio_readlineb+0x5c>
 8049677:	eb 62                	jmp    80496db <rio_readlineb+0xb7>
 8049679:	85 c0                	test   %eax,%eax
 804967b:	74 63                	je     80496e0 <rio_readlineb+0xbc>
 804967d:	89 73 08             	mov    %esi,0x8(%ebx)
 8049680:	8b 43 04             	mov    0x4(%ebx),%eax
 8049683:	85 c0                	test   %eax,%eax
 8049685:	7e cc                	jle    8049653 <rio_readlineb+0x2f>
 8049687:	8b 4b 08             	mov    0x8(%ebx),%ecx
 804968a:	0f b6 11             	movzbl (%ecx),%edx
 804968d:	88 54 24 1b          	mov    %dl,0x1b(%esp)
 8049691:	83 c1 01             	add    $0x1,%ecx
 8049694:	89 4b 08             	mov    %ecx,0x8(%ebx)
 8049697:	83 e8 01             	sub    $0x1,%eax
 804969a:	89 43 04             	mov    %eax,0x4(%ebx)
 804969d:	83 c7 01             	add    $0x1,%edi
 80496a0:	88 57 ff             	mov    %dl,-0x1(%edi)
 80496a3:	80 fa 0a             	cmp    $0xa,%dl
 80496a6:	75 09                	jne    80496b1 <rio_readlineb+0x8d>
 80496a8:	eb 1d                	jmp    80496c7 <rio_readlineb+0xa3>
 80496aa:	83 fd 01             	cmp    $0x1,%ebp
 80496ad:	75 18                	jne    80496c7 <rio_readlineb+0xa3>
 80496af:	eb 1b                	jmp    80496cc <rio_readlineb+0xa8>
 80496b1:	83 c5 01             	add    $0x1,%ebp
 80496b4:	3b 6c 24 08          	cmp    0x8(%esp),%ebp
 80496b8:	74 09                	je     80496c3 <rio_readlineb+0x9f>
 80496ba:	eb c4                	jmp    8049680 <rio_readlineb+0x5c>
 80496bc:	bd 01 00 00 00       	mov    $0x1,%ebp
 80496c1:	eb 04                	jmp    80496c7 <rio_readlineb+0xa3>
 80496c3:	8b 6c 24 0c          	mov    0xc(%esp),%ebp
 80496c7:	c6 07 00             	movb   $0x0,(%edi)
 80496ca:	89 e8                	mov    %ebp,%eax
 80496cc:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 80496d0:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 80496d7:	74 17                	je     80496f0 <rio_readlineb+0xcc>
 80496d9:	eb 10                	jmp    80496eb <rio_readlineb+0xc7>
 80496db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80496e0:	85 c0                	test   %eax,%eax
 80496e2:	74 c6                	je     80496aa <rio_readlineb+0x86>
 80496e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80496e9:	eb e1                	jmp    80496cc <rio_readlineb+0xa8>
 80496eb:	e8 10 f1 ff ff       	call   8048800 <__stack_chk_fail@plt>
 80496f0:	83 c4 2c             	add    $0x2c,%esp
 80496f3:	5b                   	pop    %ebx
 80496f4:	5e                   	pop    %esi
 80496f5:	5f                   	pop    %edi
 80496f6:	5d                   	pop    %ebp
 80496f7:	c3                   	ret    

080496f8 <submitr>:
 80496f8:	55                   	push   %ebp
 80496f9:	57                   	push   %edi
 80496fa:	56                   	push   %esi
 80496fb:	53                   	push   %ebx
 80496fc:	81 ec 60 a0 00 00    	sub    $0xa060,%esp
 8049702:	8b b4 24 74 a0 00 00 	mov    0xa074(%esp),%esi
 8049709:	8b 84 24 7c a0 00 00 	mov    0xa07c(%esp),%eax
 8049710:	89 44 24 10          	mov    %eax,0x10(%esp)
 8049714:	8b 84 24 80 a0 00 00 	mov    0xa080(%esp),%eax
 804971b:	89 44 24 14          	mov    %eax,0x14(%esp)
 804971f:	8b 84 24 84 a0 00 00 	mov    0xa084(%esp),%eax
 8049726:	89 44 24 18          	mov    %eax,0x18(%esp)
 804972a:	8b 9c 24 88 a0 00 00 	mov    0xa088(%esp),%ebx
 8049731:	8b 84 24 8c a0 00 00 	mov    0xa08c(%esp),%eax
 8049738:	89 44 24 1c          	mov    %eax,0x1c(%esp)
 804973c:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049742:	89 84 24 50 a0 00 00 	mov    %eax,0xa050(%esp)
 8049749:	31 c0                	xor    %eax,%eax
 804974b:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 8049752:	00 
 8049753:	6a 00                	push   $0x0
 8049755:	6a 01                	push   $0x1
 8049757:	6a 02                	push   $0x2
 8049759:	e8 92 f1 ff ff       	call   80488f0 <socket@plt>
 804975e:	89 44 24 18          	mov    %eax,0x18(%esp)
 8049762:	83 c4 10             	add    $0x10,%esp
 8049765:	85 c0                	test   %eax,%eax
 8049767:	79 52                	jns    80497bb <submitr+0xc3>
 8049769:	8b 44 24 18          	mov    0x18(%esp),%eax
 804976d:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049773:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 804977a:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049781:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049788:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 804978f:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049796:	c7 40 18 63 72 65 61 	movl   $0x61657263,0x18(%eax)
 804979d:	c7 40 1c 74 65 20 73 	movl   $0x73206574,0x1c(%eax)
 80497a4:	c7 40 20 6f 63 6b 65 	movl   $0x656b636f,0x20(%eax)
 80497ab:	66 c7 40 24 74 00    	movw   $0x74,0x24(%eax)
 80497b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80497b6:	e9 3f 06 00 00       	jmp    8049dfa <submitr+0x702>
 80497bb:	83 ec 0c             	sub    $0xc,%esp
 80497be:	56                   	push   %esi
 80497bf:	e8 4c f1 ff ff       	call   8048910 <gethostbyname@plt>
 80497c4:	83 c4 10             	add    $0x10,%esp
 80497c7:	85 c0                	test   %eax,%eax
 80497c9:	75 73                	jne    804983e <submitr+0x146>
 80497cb:	8b 44 24 18          	mov    0x18(%esp),%eax
 80497cf:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 80497d5:	c7 40 04 72 3a 20 44 	movl   $0x44203a72,0x4(%eax)
 80497dc:	c7 40 08 4e 53 20 69 	movl   $0x6920534e,0x8(%eax)
 80497e3:	c7 40 0c 73 20 75 6e 	movl   $0x6e752073,0xc(%eax)
 80497ea:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 80497f1:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 80497f8:	c7 40 18 72 65 73 6f 	movl   $0x6f736572,0x18(%eax)
 80497ff:	c7 40 1c 6c 76 65 20 	movl   $0x2065766c,0x1c(%eax)
 8049806:	c7 40 20 73 65 72 76 	movl   $0x76726573,0x20(%eax)
 804980d:	c7 40 24 65 72 20 61 	movl   $0x61207265,0x24(%eax)
 8049814:	c7 40 28 64 64 72 65 	movl   $0x65726464,0x28(%eax)
 804981b:	66 c7 40 2c 73 73    	movw   $0x7373,0x2c(%eax)
 8049821:	c6 40 2e 00          	movb   $0x0,0x2e(%eax)
 8049825:	83 ec 0c             	sub    $0xc,%esp
 8049828:	ff 74 24 14          	pushl  0x14(%esp)
 804982c:	e8 0f f1 ff ff       	call   8048940 <close@plt>
 8049831:	83 c4 10             	add    $0x10,%esp
 8049834:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049839:	e9 bc 05 00 00       	jmp    8049dfa <submitr+0x702>
 804983e:	8d 74 24 30          	lea    0x30(%esp),%esi
 8049842:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
 8049849:	00 
 804984a:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
 8049851:	00 
 8049852:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
 8049859:	00 
 804985a:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
 8049861:	00 
 8049862:	66 c7 44 24 30 02 00 	movw   $0x2,0x30(%esp)
 8049869:	6a 0c                	push   $0xc
 804986b:	ff 70 0c             	pushl  0xc(%eax)
 804986e:	8b 40 10             	mov    0x10(%eax),%eax
 8049871:	ff 30                	pushl  (%eax)
 8049873:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049877:	50                   	push   %eax
 8049878:	e8 e3 ef ff ff       	call   8048860 <__memmove_chk@plt>
 804987d:	0f b7 84 24 84 a0 00 	movzwl 0xa084(%esp),%eax
 8049884:	00 
 8049885:	66 c1 c8 08          	ror    $0x8,%ax
 8049889:	66 89 44 24 42       	mov    %ax,0x42(%esp)
 804988e:	83 c4 0c             	add    $0xc,%esp
 8049891:	6a 10                	push   $0x10
 8049893:	56                   	push   %esi
 8049894:	ff 74 24 14          	pushl  0x14(%esp)
 8049898:	e8 93 f0 ff ff       	call   8048930 <connect@plt>
 804989d:	83 c4 10             	add    $0x10,%esp
 80498a0:	85 c0                	test   %eax,%eax
 80498a2:	79 65                	jns    8049909 <submitr+0x211>
 80498a4:	8b 44 24 18          	mov    0x18(%esp),%eax
 80498a8:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 80498ae:	c7 40 04 72 3a 20 55 	movl   $0x55203a72,0x4(%eax)
 80498b5:	c7 40 08 6e 61 62 6c 	movl   $0x6c62616e,0x8(%eax)
 80498bc:	c7 40 0c 65 20 74 6f 	movl   $0x6f742065,0xc(%eax)
 80498c3:	c7 40 10 20 63 6f 6e 	movl   $0x6e6f6320,0x10(%eax)
 80498ca:	c7 40 14 6e 65 63 74 	movl   $0x7463656e,0x14(%eax)
 80498d1:	c7 40 18 20 74 6f 20 	movl   $0x206f7420,0x18(%eax)
 80498d8:	c7 40 1c 74 68 65 20 	movl   $0x20656874,0x1c(%eax)
 80498df:	c7 40 20 73 65 72 76 	movl   $0x76726573,0x20(%eax)
 80498e6:	66 c7 40 24 65 72    	movw   $0x7265,0x24(%eax)
 80498ec:	c6 40 26 00          	movb   $0x0,0x26(%eax)
 80498f0:	83 ec 0c             	sub    $0xc,%esp
 80498f3:	ff 74 24 14          	pushl  0x14(%esp)
 80498f7:	e8 44 f0 ff ff       	call   8048940 <close@plt>
 80498fc:	83 c4 10             	add    $0x10,%esp
 80498ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049904:	e9 f1 04 00 00       	jmp    8049dfa <submitr+0x702>
 8049909:	be ff ff ff ff       	mov    $0xffffffff,%esi
 804990e:	b8 00 00 00 00       	mov    $0x0,%eax
 8049913:	89 f1                	mov    %esi,%ecx
 8049915:	89 df                	mov    %ebx,%edi
 8049917:	f2 ae                	repnz scas %es:(%edi),%al
 8049919:	f7 d1                	not    %ecx
 804991b:	89 cd                	mov    %ecx,%ebp
 804991d:	89 f1                	mov    %esi,%ecx
 804991f:	8b 7c 24 0c          	mov    0xc(%esp),%edi
 8049923:	f2 ae                	repnz scas %es:(%edi),%al
 8049925:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
 8049929:	89 f1                	mov    %esi,%ecx
 804992b:	8b 7c 24 10          	mov    0x10(%esp),%edi
 804992f:	f2 ae                	repnz scas %es:(%edi),%al
 8049931:	89 ca                	mov    %ecx,%edx
 8049933:	f7 d2                	not    %edx
 8049935:	89 f1                	mov    %esi,%ecx
 8049937:	8b 7c 24 14          	mov    0x14(%esp),%edi
 804993b:	f2 ae                	repnz scas %es:(%edi),%al
 804993d:	2b 54 24 1c          	sub    0x1c(%esp),%edx
 8049941:	29 ca                	sub    %ecx,%edx
 8049943:	8d 44 6d fd          	lea    -0x3(%ebp,%ebp,2),%eax
 8049947:	8d 44 02 7b          	lea    0x7b(%edx,%eax,1),%eax
 804994b:	3d 00 20 00 00       	cmp    $0x2000,%eax
 8049950:	76 7e                	jbe    80499d0 <submitr+0x2d8>
 8049952:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049956:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 804995c:	c7 40 04 72 3a 20 52 	movl   $0x52203a72,0x4(%eax)
 8049963:	c7 40 08 65 73 75 6c 	movl   $0x6c757365,0x8(%eax)
 804996a:	c7 40 0c 74 20 73 74 	movl   $0x74732074,0xc(%eax)
 8049971:	c7 40 10 72 69 6e 67 	movl   $0x676e6972,0x10(%eax)
 8049978:	c7 40 14 20 74 6f 6f 	movl   $0x6f6f7420,0x14(%eax)
 804997f:	c7 40 18 20 6c 61 72 	movl   $0x72616c20,0x18(%eax)
 8049986:	c7 40 1c 67 65 2e 20 	movl   $0x202e6567,0x1c(%eax)
 804998d:	c7 40 20 49 6e 63 72 	movl   $0x72636e49,0x20(%eax)
 8049994:	c7 40 24 65 61 73 65 	movl   $0x65736165,0x24(%eax)
 804999b:	c7 40 28 20 53 55 42 	movl   $0x42555320,0x28(%eax)
 80499a2:	c7 40 2c 4d 49 54 52 	movl   $0x5254494d,0x2c(%eax)
 80499a9:	c7 40 30 5f 4d 41 58 	movl   $0x58414d5f,0x30(%eax)
 80499b0:	c7 40 34 42 55 46 00 	movl   $0x465542,0x34(%eax)
 80499b7:	83 ec 0c             	sub    $0xc,%esp
 80499ba:	ff 74 24 14          	pushl  0x14(%esp)
 80499be:	e8 7d ef ff ff       	call   8048940 <close@plt>
 80499c3:	83 c4 10             	add    $0x10,%esp
 80499c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 80499cb:	e9 2a 04 00 00       	jmp    8049dfa <submitr+0x702>
 80499d0:	8d 94 24 4c 40 00 00 	lea    0x404c(%esp),%edx
 80499d7:	b9 00 08 00 00       	mov    $0x800,%ecx
 80499dc:	b8 00 00 00 00       	mov    $0x0,%eax
 80499e1:	89 d7                	mov    %edx,%edi
 80499e3:	f3 ab                	rep stos %eax,%es:(%edi)
 80499e5:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 80499ea:	89 df                	mov    %ebx,%edi
 80499ec:	f2 ae                	repnz scas %es:(%edi),%al
 80499ee:	f7 d1                	not    %ecx
 80499f0:	89 ce                	mov    %ecx,%esi
 80499f2:	83 ee 01             	sub    $0x1,%esi
 80499f5:	0f 84 5c 04 00 00    	je     8049e57 <submitr+0x75f>
 80499fb:	89 d5                	mov    %edx,%ebp
 80499fd:	bf d9 ff 00 00       	mov    $0xffd9,%edi
 8049a02:	0f b6 13             	movzbl (%ebx),%edx
 8049a05:	8d 4a d6             	lea    -0x2a(%edx),%ecx
 8049a08:	b8 01 00 00 00       	mov    $0x1,%eax
 8049a0d:	80 f9 0f             	cmp    $0xf,%cl
 8049a10:	77 0a                	ja     8049a1c <submitr+0x324>
 8049a12:	89 f8                	mov    %edi,%eax
 8049a14:	d3 e8                	shr    %cl,%eax
 8049a16:	83 f0 01             	xor    $0x1,%eax
 8049a19:	83 e0 01             	and    $0x1,%eax
 8049a1c:	80 fa 5f             	cmp    $0x5f,%dl
 8049a1f:	0f 94 c1             	sete   %cl
 8049a22:	38 c1                	cmp    %al,%cl
 8049a24:	73 0c                	jae    8049a32 <submitr+0x33a>
 8049a26:	89 d0                	mov    %edx,%eax
 8049a28:	83 e0 df             	and    $0xffffffdf,%eax
 8049a2b:	83 e8 41             	sub    $0x41,%eax
 8049a2e:	3c 19                	cmp    $0x19,%al
 8049a30:	77 08                	ja     8049a3a <submitr+0x342>
 8049a32:	88 55 00             	mov    %dl,0x0(%ebp)
 8049a35:	8d 6d 01             	lea    0x1(%ebp),%ebp
 8049a38:	eb 62                	jmp    8049a9c <submitr+0x3a4>
 8049a3a:	80 fa 20             	cmp    $0x20,%dl
 8049a3d:	75 09                	jne    8049a48 <submitr+0x350>
 8049a3f:	c6 45 00 2b          	movb   $0x2b,0x0(%ebp)
 8049a43:	8d 6d 01             	lea    0x1(%ebp),%ebp
 8049a46:	eb 54                	jmp    8049a9c <submitr+0x3a4>
 8049a48:	8d 42 e0             	lea    -0x20(%edx),%eax
 8049a4b:	3c 5f                	cmp    $0x5f,%al
 8049a4d:	76 09                	jbe    8049a58 <submitr+0x360>
 8049a4f:	80 fa 09             	cmp    $0x9,%dl
 8049a52:	0f 85 bb 03 00 00    	jne    8049e13 <submitr+0x71b>
 8049a58:	83 ec 0c             	sub    $0xc,%esp
 8049a5b:	0f b6 d2             	movzbl %dl,%edx
 8049a5e:	52                   	push   %edx
 8049a5f:	68 20 ab 04 08       	push   $0x804ab20
 8049a64:	6a 08                	push   $0x8
 8049a66:	6a 01                	push   $0x1
 8049a68:	8d 84 24 68 80 00 00 	lea    0x8068(%esp),%eax
 8049a6f:	50                   	push   %eax
 8049a70:	e8 eb ee ff ff       	call   8048960 <__sprintf_chk@plt>
 8049a75:	0f b6 84 24 6c 80 00 	movzbl 0x806c(%esp),%eax
 8049a7c:	00 
 8049a7d:	88 45 00             	mov    %al,0x0(%ebp)
 8049a80:	0f b6 84 24 6d 80 00 	movzbl 0x806d(%esp),%eax
 8049a87:	00 
 8049a88:	88 45 01             	mov    %al,0x1(%ebp)
 8049a8b:	0f b6 84 24 6e 80 00 	movzbl 0x806e(%esp),%eax
 8049a92:	00 
 8049a93:	88 45 02             	mov    %al,0x2(%ebp)
 8049a96:	83 c4 20             	add    $0x20,%esp
 8049a99:	8d 6d 03             	lea    0x3(%ebp),%ebp
 8049a9c:	83 c3 01             	add    $0x1,%ebx
 8049a9f:	83 ee 01             	sub    $0x1,%esi
 8049aa2:	0f 85 5a ff ff ff    	jne    8049a02 <submitr+0x30a>
 8049aa8:	e9 aa 03 00 00       	jmp    8049e57 <submitr+0x75f>
 8049aad:	83 ec 04             	sub    $0x4,%esp
 8049ab0:	53                   	push   %ebx
 8049ab1:	56                   	push   %esi
 8049ab2:	55                   	push   %ebp
 8049ab3:	e8 d8 ed ff ff       	call   8048890 <write@plt>
 8049ab8:	83 c4 10             	add    $0x10,%esp
 8049abb:	85 c0                	test   %eax,%eax
 8049abd:	7f 0f                	jg     8049ace <submitr+0x3d6>
 8049abf:	e8 0c ee ff ff       	call   80488d0 <__errno_location@plt>
 8049ac4:	83 38 04             	cmpl   $0x4,(%eax)
 8049ac7:	75 0f                	jne    8049ad8 <submitr+0x3e0>
 8049ac9:	b8 00 00 00 00       	mov    $0x0,%eax
 8049ace:	01 c6                	add    %eax,%esi
 8049ad0:	29 c3                	sub    %eax,%ebx
 8049ad2:	75 d9                	jne    8049aad <submitr+0x3b5>
 8049ad4:	85 ff                	test   %edi,%edi
 8049ad6:	79 69                	jns    8049b41 <submitr+0x449>
 8049ad8:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049adc:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049ae2:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049ae9:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049af0:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049af7:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049afe:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049b05:	c7 40 18 77 72 69 74 	movl   $0x74697277,0x18(%eax)
 8049b0c:	c7 40 1c 65 20 74 6f 	movl   $0x6f742065,0x1c(%eax)
 8049b13:	c7 40 20 20 74 68 65 	movl   $0x65687420,0x20(%eax)
 8049b1a:	c7 40 24 20 73 65 72 	movl   $0x72657320,0x24(%eax)
 8049b21:	c7 40 28 76 65 72 00 	movl   $0x726576,0x28(%eax)
 8049b28:	83 ec 0c             	sub    $0xc,%esp
 8049b2b:	ff 74 24 14          	pushl  0x14(%esp)
 8049b2f:	e8 0c ee ff ff       	call   8048940 <close@plt>
 8049b34:	83 c4 10             	add    $0x10,%esp
 8049b37:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049b3c:	e9 b9 02 00 00       	jmp    8049dfa <submitr+0x702>
 8049b41:	8b 44 24 08          	mov    0x8(%esp),%eax
 8049b45:	89 44 24 40          	mov    %eax,0x40(%esp)
 8049b49:	c7 44 24 44 00 00 00 	movl   $0x0,0x44(%esp)
 8049b50:	00 
 8049b51:	8d 44 24 4c          	lea    0x4c(%esp),%eax
 8049b55:	89 44 24 48          	mov    %eax,0x48(%esp)
 8049b59:	b9 00 20 00 00       	mov    $0x2000,%ecx
 8049b5e:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 8049b65:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049b69:	e8 b6 fa ff ff       	call   8049624 <rio_readlineb>
 8049b6e:	85 c0                	test   %eax,%eax
 8049b70:	7f 7d                	jg     8049bef <submitr+0x4f7>
 8049b72:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049b76:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049b7c:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049b83:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049b8a:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049b91:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049b98:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049b9f:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 8049ba6:	c7 40 1c 20 66 69 72 	movl   $0x72696620,0x1c(%eax)
 8049bad:	c7 40 20 73 74 20 68 	movl   $0x68207473,0x20(%eax)
 8049bb4:	c7 40 24 65 61 64 65 	movl   $0x65646165,0x24(%eax)
 8049bbb:	c7 40 28 72 20 66 72 	movl   $0x72662072,0x28(%eax)
 8049bc2:	c7 40 2c 6f 6d 20 73 	movl   $0x73206d6f,0x2c(%eax)
 8049bc9:	c7 40 30 65 72 76 65 	movl   $0x65767265,0x30(%eax)
 8049bd0:	66 c7 40 34 72 00    	movw   $0x72,0x34(%eax)
 8049bd6:	83 ec 0c             	sub    $0xc,%esp
 8049bd9:	ff 74 24 14          	pushl  0x14(%esp)
 8049bdd:	e8 5e ed ff ff       	call   8048940 <close@plt>
 8049be2:	83 c4 10             	add    $0x10,%esp
 8049be5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049bea:	e9 0b 02 00 00       	jmp    8049dfa <submitr+0x702>
 8049bef:	83 ec 0c             	sub    $0xc,%esp
 8049bf2:	8d 84 24 58 80 00 00 	lea    0x8058(%esp),%eax
 8049bf9:	50                   	push   %eax
 8049bfa:	8d 44 24 3c          	lea    0x3c(%esp),%eax
 8049bfe:	50                   	push   %eax
 8049bff:	8d 84 24 60 60 00 00 	lea    0x6060(%esp),%eax
 8049c06:	50                   	push   %eax
 8049c07:	68 27 ab 04 08       	push   $0x804ab27
 8049c0c:	8d 84 24 68 20 00 00 	lea    0x2068(%esp),%eax
 8049c13:	50                   	push   %eax
 8049c14:	e8 97 ec ff ff       	call   80488b0 <__isoc99_sscanf@plt>
 8049c19:	8b 44 24 4c          	mov    0x4c(%esp),%eax
 8049c1d:	83 c4 20             	add    $0x20,%esp
 8049c20:	3d c8 00 00 00       	cmp    $0xc8,%eax
 8049c25:	0f 84 c4 00 00 00    	je     8049cef <submitr+0x5f7>
 8049c2b:	83 ec 08             	sub    $0x8,%esp
 8049c2e:	8d 94 24 54 80 00 00 	lea    0x8054(%esp),%edx
 8049c35:	52                   	push   %edx
 8049c36:	50                   	push   %eax
 8049c37:	68 38 aa 04 08       	push   $0x804aa38
 8049c3c:	6a ff                	push   $0xffffffff
 8049c3e:	6a 01                	push   $0x1
 8049c40:	ff 74 24 34          	pushl  0x34(%esp)
 8049c44:	e8 17 ed ff ff       	call   8048960 <__sprintf_chk@plt>
 8049c49:	83 c4 14             	add    $0x14,%esp
 8049c4c:	ff 74 24 14          	pushl  0x14(%esp)
 8049c50:	e8 eb ec ff ff       	call   8048940 <close@plt>
 8049c55:	83 c4 10             	add    $0x10,%esp
 8049c58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049c5d:	e9 98 01 00 00       	jmp    8049dfa <submitr+0x702>
 8049c62:	b9 00 20 00 00       	mov    $0x2000,%ecx
 8049c67:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 8049c6e:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049c72:	e8 ad f9 ff ff       	call   8049624 <rio_readlineb>
 8049c77:	85 c0                	test   %eax,%eax
 8049c79:	7f 74                	jg     8049cef <submitr+0x5f7>
 8049c7b:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049c7f:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049c85:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049c8c:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049c93:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049c9a:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049ca1:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049ca8:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 8049caf:	c7 40 1c 20 68 65 61 	movl   $0x61656820,0x1c(%eax)
 8049cb6:	c7 40 20 64 65 72 73 	movl   $0x73726564,0x20(%eax)
 8049cbd:	c7 40 24 20 66 72 6f 	movl   $0x6f726620,0x24(%eax)
 8049cc4:	c7 40 28 6d 20 73 65 	movl   $0x6573206d,0x28(%eax)
 8049ccb:	c7 40 2c 72 76 65 72 	movl   $0x72657672,0x2c(%eax)
 8049cd2:	c6 40 30 00          	movb   $0x0,0x30(%eax)
 8049cd6:	83 ec 0c             	sub    $0xc,%esp
 8049cd9:	ff 74 24 14          	pushl  0x14(%esp)
 8049cdd:	e8 5e ec ff ff       	call   8048940 <close@plt>
 8049ce2:	83 c4 10             	add    $0x10,%esp
 8049ce5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049cea:	e9 0b 01 00 00       	jmp    8049dfa <submitr+0x702>
 8049cef:	80 bc 24 4c 20 00 00 	cmpb   $0xd,0x204c(%esp)
 8049cf6:	0d 
 8049cf7:	0f 85 65 ff ff ff    	jne    8049c62 <submitr+0x56a>
 8049cfd:	80 bc 24 4d 20 00 00 	cmpb   $0xa,0x204d(%esp)
 8049d04:	0a 
 8049d05:	0f 85 57 ff ff ff    	jne    8049c62 <submitr+0x56a>
 8049d0b:	80 bc 24 4e 20 00 00 	cmpb   $0x0,0x204e(%esp)
 8049d12:	00 
 8049d13:	0f 85 49 ff ff ff    	jne    8049c62 <submitr+0x56a>
 8049d19:	b9 00 20 00 00       	mov    $0x2000,%ecx
 8049d1e:	8d 94 24 4c 20 00 00 	lea    0x204c(%esp),%edx
 8049d25:	8d 44 24 40          	lea    0x40(%esp),%eax
 8049d29:	e8 f6 f8 ff ff       	call   8049624 <rio_readlineb>
 8049d2e:	85 c0                	test   %eax,%eax
 8049d30:	7f 7b                	jg     8049dad <submitr+0x6b5>
 8049d32:	8b 44 24 18          	mov    0x18(%esp),%eax
 8049d36:	c7 00 45 72 72 6f    	movl   $0x6f727245,(%eax)
 8049d3c:	c7 40 04 72 3a 20 43 	movl   $0x43203a72,0x4(%eax)
 8049d43:	c7 40 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%eax)
 8049d4a:	c7 40 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%eax)
 8049d51:	c7 40 10 61 62 6c 65 	movl   $0x656c6261,0x10(%eax)
 8049d58:	c7 40 14 20 74 6f 20 	movl   $0x206f7420,0x14(%eax)
 8049d5f:	c7 40 18 72 65 61 64 	movl   $0x64616572,0x18(%eax)
 8049d66:	c7 40 1c 20 73 74 61 	movl   $0x61747320,0x1c(%eax)
 8049d6d:	c7 40 20 74 75 73 20 	movl   $0x20737574,0x20(%eax)
 8049d74:	c7 40 24 6d 65 73 73 	movl   $0x7373656d,0x24(%eax)
 8049d7b:	c7 40 28 61 67 65 20 	movl   $0x20656761,0x28(%eax)
 8049d82:	c7 40 2c 66 72 6f 6d 	movl   $0x6d6f7266,0x2c(%eax)
 8049d89:	c7 40 30 20 73 65 72 	movl   $0x72657320,0x30(%eax)
 8049d90:	c7 40 34 76 65 72 00 	movl   $0x726576,0x34(%eax)
 8049d97:	83 ec 0c             	sub    $0xc,%esp
 8049d9a:	ff 74 24 14          	pushl  0x14(%esp)
 8049d9e:	e8 9d eb ff ff       	call   8048940 <close@plt>
 8049da3:	83 c4 10             	add    $0x10,%esp
 8049da6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049dab:	eb 4d                	jmp    8049dfa <submitr+0x702>
 8049dad:	83 ec 08             	sub    $0x8,%esp
 8049db0:	8d 84 24 54 20 00 00 	lea    0x2054(%esp),%eax
 8049db7:	50                   	push   %eax
 8049db8:	8b 7c 24 24          	mov    0x24(%esp),%edi
 8049dbc:	57                   	push   %edi
 8049dbd:	e8 4e ea ff ff       	call   8048810 <strcpy@plt>
 8049dc2:	83 c4 04             	add    $0x4,%esp
 8049dc5:	ff 74 24 14          	pushl  0x14(%esp)
 8049dc9:	e8 72 eb ff ff       	call   8048940 <close@plt>
 8049dce:	0f b6 17             	movzbl (%edi),%edx
 8049dd1:	b8 4f 00 00 00       	mov    $0x4f,%eax
 8049dd6:	83 c4 10             	add    $0x10,%esp
 8049dd9:	29 d0                	sub    %edx,%eax
 8049ddb:	75 13                	jne    8049df0 <submitr+0x6f8>
 8049ddd:	0f b6 57 01          	movzbl 0x1(%edi),%edx
 8049de1:	b8 4b 00 00 00       	mov    $0x4b,%eax
 8049de6:	29 d0                	sub    %edx,%eax
 8049de8:	75 06                	jne    8049df0 <submitr+0x6f8>
 8049dea:	0f b6 47 02          	movzbl 0x2(%edi),%eax
 8049dee:	f7 d8                	neg    %eax
 8049df0:	85 c0                	test   %eax,%eax
 8049df2:	0f 95 c0             	setne  %al
 8049df5:	0f b6 c0             	movzbl %al,%eax
 8049df8:	f7 d8                	neg    %eax
 8049dfa:	8b bc 24 4c a0 00 00 	mov    0xa04c(%esp),%edi
 8049e01:	65 33 3d 14 00 00 00 	xor    %gs:0x14,%edi
 8049e08:	0f 84 a9 00 00 00    	je     8049eb7 <submitr+0x7bf>
 8049e0e:	e9 9f 00 00 00       	jmp    8049eb2 <submitr+0x7ba>
 8049e13:	a1 68 aa 04 08       	mov    0x804aa68,%eax
 8049e18:	8b 7c 24 18          	mov    0x18(%esp),%edi
 8049e1c:	89 07                	mov    %eax,(%edi)
 8049e1e:	a1 a7 aa 04 08       	mov    0x804aaa7,%eax
 8049e23:	89 47 3f             	mov    %eax,0x3f(%edi)
 8049e26:	89 f8                	mov    %edi,%eax
 8049e28:	83 c7 04             	add    $0x4,%edi
 8049e2b:	83 e7 fc             	and    $0xfffffffc,%edi
 8049e2e:	29 f8                	sub    %edi,%eax
 8049e30:	be 68 aa 04 08       	mov    $0x804aa68,%esi
 8049e35:	29 c6                	sub    %eax,%esi
 8049e37:	83 c0 43             	add    $0x43,%eax
 8049e3a:	c1 e8 02             	shr    $0x2,%eax
 8049e3d:	89 c1                	mov    %eax,%ecx
 8049e3f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 8049e41:	83 ec 0c             	sub    $0xc,%esp
 8049e44:	ff 74 24 14          	pushl  0x14(%esp)
 8049e48:	e8 f3 ea ff ff       	call   8048940 <close@plt>
 8049e4d:	83 c4 10             	add    $0x10,%esp
 8049e50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049e55:	eb a3                	jmp    8049dfa <submitr+0x702>
 8049e57:	8d 84 24 4c 40 00 00 	lea    0x404c(%esp),%eax
 8049e5e:	50                   	push   %eax
 8049e5f:	ff 74 24 18          	pushl  0x18(%esp)
 8049e63:	ff 74 24 18          	pushl  0x18(%esp)
 8049e67:	ff 74 24 18          	pushl  0x18(%esp)
 8049e6b:	68 ac aa 04 08       	push   $0x804aaac
 8049e70:	68 00 20 00 00       	push   $0x2000
 8049e75:	6a 01                	push   $0x1
 8049e77:	8d bc 24 68 20 00 00 	lea    0x2068(%esp),%edi
 8049e7e:	57                   	push   %edi
 8049e7f:	e8 dc ea ff ff       	call   8048960 <__sprintf_chk@plt>
 8049e84:	b8 00 00 00 00       	mov    $0x0,%eax
 8049e89:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049e8e:	f2 ae                	repnz scas %es:(%edi),%al
 8049e90:	f7 d1                	not    %ecx
 8049e92:	8d 79 ff             	lea    -0x1(%ecx),%edi
 8049e95:	83 c4 20             	add    $0x20,%esp
 8049e98:	89 fb                	mov    %edi,%ebx
 8049e9a:	8d b4 24 4c 20 00 00 	lea    0x204c(%esp),%esi
 8049ea1:	8b 6c 24 08          	mov    0x8(%esp),%ebp
 8049ea5:	85 ff                	test   %edi,%edi
 8049ea7:	0f 85 00 fc ff ff    	jne    8049aad <submitr+0x3b5>
 8049ead:	e9 8f fc ff ff       	jmp    8049b41 <submitr+0x449>
 8049eb2:	e8 49 e9 ff ff       	call   8048800 <__stack_chk_fail@plt>
 8049eb7:	81 c4 5c a0 00 00    	add    $0xa05c,%esp
 8049ebd:	5b                   	pop    %ebx
 8049ebe:	5e                   	pop    %esi
 8049ebf:	5f                   	pop    %edi
 8049ec0:	5d                   	pop    %ebp
 8049ec1:	c3                   	ret    

08049ec2 <init_timeout>:
 8049ec2:	53                   	push   %ebx
 8049ec3:	83 ec 08             	sub    $0x8,%esp
 8049ec6:	8b 5c 24 10          	mov    0x10(%esp),%ebx
 8049eca:	85 db                	test   %ebx,%ebx
 8049ecc:	74 24                	je     8049ef2 <init_timeout+0x30>
 8049ece:	83 ec 08             	sub    $0x8,%esp
 8049ed1:	68 01 96 04 08       	push   $0x8049601
 8049ed6:	6a 0e                	push   $0xe
 8049ed8:	e8 f3 e8 ff ff       	call   80487d0 <signal@plt>
 8049edd:	85 db                	test   %ebx,%ebx
 8049edf:	b8 00 00 00 00       	mov    $0x0,%eax
 8049ee4:	0f 48 d8             	cmovs  %eax,%ebx
 8049ee7:	89 1c 24             	mov    %ebx,(%esp)
 8049eea:	e8 01 e9 ff ff       	call   80487f0 <alarm@plt>
 8049eef:	83 c4 10             	add    $0x10,%esp
 8049ef2:	83 c4 08             	add    $0x8,%esp
 8049ef5:	5b                   	pop    %ebx
 8049ef6:	c3                   	ret    

08049ef7 <init_driver>:
 8049ef7:	57                   	push   %edi
 8049ef8:	56                   	push   %esi
 8049ef9:	53                   	push   %ebx
 8049efa:	83 ec 28             	sub    $0x28,%esp
 8049efd:	8b 74 24 38          	mov    0x38(%esp),%esi
 8049f01:	65 a1 14 00 00 00    	mov    %gs:0x14,%eax
 8049f07:	89 44 24 24          	mov    %eax,0x24(%esp)
 8049f0b:	31 c0                	xor    %eax,%eax
 8049f0d:	6a 01                	push   $0x1
 8049f0f:	6a 0d                	push   $0xd
 8049f11:	e8 ba e8 ff ff       	call   80487d0 <signal@plt>
 8049f16:	83 c4 08             	add    $0x8,%esp
 8049f19:	6a 01                	push   $0x1
 8049f1b:	6a 1d                	push   $0x1d
 8049f1d:	e8 ae e8 ff ff       	call   80487d0 <signal@plt>
 8049f22:	83 c4 08             	add    $0x8,%esp
 8049f25:	6a 01                	push   $0x1
 8049f27:	6a 1d                	push   $0x1d
 8049f29:	e8 a2 e8 ff ff       	call   80487d0 <signal@plt>
 8049f2e:	83 c4 0c             	add    $0xc,%esp
 8049f31:	6a 00                	push   $0x0
 8049f33:	6a 01                	push   $0x1
 8049f35:	6a 02                	push   $0x2
 8049f37:	e8 b4 e9 ff ff       	call   80488f0 <socket@plt>
 8049f3c:	83 c4 10             	add    $0x10,%esp
 8049f3f:	85 c0                	test   %eax,%eax
 8049f41:	79 4e                	jns    8049f91 <init_driver+0x9a>
 8049f43:	c7 06 45 72 72 6f    	movl   $0x6f727245,(%esi)
 8049f49:	c7 46 04 72 3a 20 43 	movl   $0x43203a72,0x4(%esi)
 8049f50:	c7 46 08 6c 69 65 6e 	movl   $0x6e65696c,0x8(%esi)
 8049f57:	c7 46 0c 74 20 75 6e 	movl   $0x6e752074,0xc(%esi)
 8049f5e:	c7 46 10 61 62 6c 65 	movl   $0x656c6261,0x10(%esi)
 8049f65:	c7 46 14 20 74 6f 20 	movl   $0x206f7420,0x14(%esi)
 8049f6c:	c7 46 18 63 72 65 61 	movl   $0x61657263,0x18(%esi)
 8049f73:	c7 46 1c 74 65 20 73 	movl   $0x73206574,0x1c(%esi)
 8049f7a:	c7 46 20 6f 63 6b 65 	movl   $0x656b636f,0x20(%esi)
 8049f81:	66 c7 46 24 74 00    	movw   $0x74,0x24(%esi)
 8049f87:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 8049f8c:	e9 1f 01 00 00       	jmp    804a0b0 <init_driver+0x1b9>
 8049f91:	89 c3                	mov    %eax,%ebx
 8049f93:	83 ec 0c             	sub    $0xc,%esp
 8049f96:	68 38 ab 04 08       	push   $0x804ab38
 8049f9b:	e8 70 e9 ff ff       	call   8048910 <gethostbyname@plt>
 8049fa0:	83 c4 10             	add    $0x10,%esp
 8049fa3:	85 c0                	test   %eax,%eax
 8049fa5:	75 6c                	jne    804a013 <init_driver+0x11c>
 8049fa7:	c7 06 45 72 72 6f    	movl   $0x6f727245,(%esi)
 8049fad:	c7 46 04 72 3a 20 44 	movl   $0x44203a72,0x4(%esi)
 8049fb4:	c7 46 08 4e 53 20 69 	movl   $0x6920534e,0x8(%esi)
 8049fbb:	c7 46 0c 73 20 75 6e 	movl   $0x6e752073,0xc(%esi)
 8049fc2:	c7 46 10 61 62 6c 65 	movl   $0x656c6261,0x10(%esi)
 8049fc9:	c7 46 14 20 74 6f 20 	movl   $0x206f7420,0x14(%esi)
 8049fd0:	c7 46 18 72 65 73 6f 	movl   $0x6f736572,0x18(%esi)
 8049fd7:	c7 46 1c 6c 76 65 20 	movl   $0x2065766c,0x1c(%esi)
 8049fde:	c7 46 20 73 65 72 76 	movl   $0x76726573,0x20(%esi)
 8049fe5:	c7 46 24 65 72 20 61 	movl   $0x61207265,0x24(%esi)
 8049fec:	c7 46 28 64 64 72 65 	movl   $0x65726464,0x28(%esi)
 8049ff3:	66 c7 46 2c 73 73    	movw   $0x7373,0x2c(%esi)
 8049ff9:	c6 46 2e 00          	movb   $0x0,0x2e(%esi)
 8049ffd:	83 ec 0c             	sub    $0xc,%esp
 804a000:	53                   	push   %ebx
 804a001:	e8 3a e9 ff ff       	call   8048940 <close@plt>
 804a006:	83 c4 10             	add    $0x10,%esp
 804a009:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804a00e:	e9 9d 00 00 00       	jmp    804a0b0 <init_driver+0x1b9>
 804a013:	8d 7c 24 0c          	lea    0xc(%esp),%edi
 804a017:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
 804a01e:	00 
 804a01f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 804a026:	00 
 804a027:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 804a02e:	00 
 804a02f:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 804a036:	00 
 804a037:	66 c7 44 24 0c 02 00 	movw   $0x2,0xc(%esp)
 804a03e:	6a 0c                	push   $0xc
 804a040:	ff 70 0c             	pushl  0xc(%eax)
 804a043:	8b 40 10             	mov    0x10(%eax),%eax
 804a046:	ff 30                	pushl  (%eax)
 804a048:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 804a04c:	50                   	push   %eax
 804a04d:	e8 0e e8 ff ff       	call   8048860 <__memmove_chk@plt>
 804a052:	66 c7 44 24 1e 43 31 	movw   $0x3143,0x1e(%esp)
 804a059:	83 c4 0c             	add    $0xc,%esp
 804a05c:	6a 10                	push   $0x10
 804a05e:	57                   	push   %edi
 804a05f:	53                   	push   %ebx
 804a060:	e8 cb e8 ff ff       	call   8048930 <connect@plt>
 804a065:	83 c4 10             	add    $0x10,%esp
 804a068:	85 c0                	test   %eax,%eax
 804a06a:	79 2a                	jns    804a096 <init_driver+0x19f>
 804a06c:	83 ec 0c             	sub    $0xc,%esp
 804a06f:	68 38 ab 04 08       	push   $0x804ab38
 804a074:	68 f8 aa 04 08       	push   $0x804aaf8
 804a079:	6a ff                	push   $0xffffffff
 804a07b:	6a 01                	push   $0x1
 804a07d:	56                   	push   %esi
 804a07e:	e8 dd e8 ff ff       	call   8048960 <__sprintf_chk@plt>
 804a083:	83 c4 14             	add    $0x14,%esp
 804a086:	53                   	push   %ebx
 804a087:	e8 b4 e8 ff ff       	call   8048940 <close@plt>
 804a08c:	83 c4 10             	add    $0x10,%esp
 804a08f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 804a094:	eb 1a                	jmp    804a0b0 <init_driver+0x1b9>
 804a096:	83 ec 0c             	sub    $0xc,%esp
 804a099:	53                   	push   %ebx
 804a09a:	e8 a1 e8 ff ff       	call   8048940 <close@plt>
 804a09f:	66 c7 06 4f 4b       	movw   $0x4b4f,(%esi)
 804a0a4:	c6 46 02 00          	movb   $0x0,0x2(%esi)
 804a0a8:	83 c4 10             	add    $0x10,%esp
 804a0ab:	b8 00 00 00 00       	mov    $0x0,%eax
 804a0b0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 804a0b4:	65 33 15 14 00 00 00 	xor    %gs:0x14,%edx
 804a0bb:	74 05                	je     804a0c2 <init_driver+0x1cb>
 804a0bd:	e8 3e e7 ff ff       	call   8048800 <__stack_chk_fail@plt>
 804a0c2:	83 c4 20             	add    $0x20,%esp
 804a0c5:	5b                   	pop    %ebx
 804a0c6:	5e                   	pop    %esi
 804a0c7:	5f                   	pop    %edi
 804a0c8:	c3                   	ret    

0804a0c9 <driver_post>:
 804a0c9:	53                   	push   %ebx
 804a0ca:	83 ec 08             	sub    $0x8,%esp
 804a0cd:	8b 44 24 10          	mov    0x10(%esp),%eax
 804a0d1:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
 804a0d5:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
 804a0da:	74 26                	je     804a102 <driver_post+0x39>
 804a0dc:	83 ec 04             	sub    $0x4,%esp
 804a0df:	ff 74 24 18          	pushl  0x18(%esp)
 804a0e3:	68 4d ab 04 08       	push   $0x804ab4d
 804a0e8:	6a 01                	push   $0x1
 804a0ea:	e8 f1 e7 ff ff       	call   80488e0 <__printf_chk@plt>
 804a0ef:	66 c7 03 4f 4b       	movw   $0x4b4f,(%ebx)
 804a0f4:	c6 43 02 00          	movb   $0x0,0x2(%ebx)
 804a0f8:	83 c4 10             	add    $0x10,%esp
 804a0fb:	b8 00 00 00 00       	mov    $0x0,%eax
 804a100:	eb 3e                	jmp    804a140 <driver_post+0x77>
 804a102:	85 c0                	test   %eax,%eax
 804a104:	74 2c                	je     804a132 <driver_post+0x69>
 804a106:	80 38 00             	cmpb   $0x0,(%eax)
 804a109:	74 27                	je     804a132 <driver_post+0x69>
 804a10b:	83 ec 04             	sub    $0x4,%esp
 804a10e:	53                   	push   %ebx
 804a10f:	ff 74 24 1c          	pushl  0x1c(%esp)
 804a113:	68 64 ab 04 08       	push   $0x804ab64
 804a118:	50                   	push   %eax
 804a119:	68 6b ab 04 08       	push   $0x804ab6b
 804a11e:	68 31 43 00 00       	push   $0x4331
 804a123:	68 38 ab 04 08       	push   $0x804ab38
 804a128:	e8 cb f5 ff ff       	call   80496f8 <submitr>
 804a12d:	83 c4 20             	add    $0x20,%esp
 804a130:	eb 0e                	jmp    804a140 <driver_post+0x77>
 804a132:	66 c7 03 4f 4b       	movw   $0x4b4f,(%ebx)
 804a137:	c6 43 02 00          	movb   $0x0,0x2(%ebx)
 804a13b:	b8 00 00 00 00       	mov    $0x0,%eax
 804a140:	83 c4 08             	add    $0x8,%esp
 804a143:	5b                   	pop    %ebx
 804a144:	c3                   	ret    
 804a145:	66 90                	xchg   %ax,%ax
 804a147:	66 90                	xchg   %ax,%ax
 804a149:	66 90                	xchg   %ax,%ax
 804a14b:	66 90                	xchg   %ax,%ax
 804a14d:	66 90                	xchg   %ax,%ax
 804a14f:	90                   	nop

0804a150 <__libc_csu_init>:
 804a150:	55                   	push   %ebp
 804a151:	57                   	push   %edi
 804a152:	56                   	push   %esi
 804a153:	53                   	push   %ebx
 804a154:	e8 57 e8 ff ff       	call   80489b0 <__x86.get_pc_thunk.bx>
 804a159:	81 c3 a7 2e 00 00    	add    $0x2ea7,%ebx
 804a15f:	83 ec 0c             	sub    $0xc,%esp
 804a162:	8b 6c 24 20          	mov    0x20(%esp),%ebp
 804a166:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804a16c:	e8 ef e5 ff ff       	call   8048760 <_init>
 804a171:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 804a177:	29 c6                	sub    %eax,%esi
 804a179:	c1 fe 02             	sar    $0x2,%esi
 804a17c:	85 f6                	test   %esi,%esi
 804a17e:	74 25                	je     804a1a5 <__libc_csu_init+0x55>
 804a180:	31 ff                	xor    %edi,%edi
 804a182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 804a188:	83 ec 04             	sub    $0x4,%esp
 804a18b:	ff 74 24 2c          	pushl  0x2c(%esp)
 804a18f:	ff 74 24 2c          	pushl  0x2c(%esp)
 804a193:	55                   	push   %ebp
 804a194:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 804a19b:	83 c7 01             	add    $0x1,%edi
 804a19e:	83 c4 10             	add    $0x10,%esp
 804a1a1:	39 f7                	cmp    %esi,%edi
 804a1a3:	75 e3                	jne    804a188 <__libc_csu_init+0x38>
 804a1a5:	83 c4 0c             	add    $0xc,%esp
 804a1a8:	5b                   	pop    %ebx
 804a1a9:	5e                   	pop    %esi
 804a1aa:	5f                   	pop    %edi
 804a1ab:	5d                   	pop    %ebp
 804a1ac:	c3                   	ret    
 804a1ad:	8d 76 00             	lea    0x0(%esi),%esi

0804a1b0 <__libc_csu_fini>:
 804a1b0:	f3 c3                	repz ret 

Disassembly of section .fini:

0804a1b4 <_fini>:
 804a1b4:	53                   	push   %ebx
 804a1b5:	83 ec 08             	sub    $0x8,%esp
 804a1b8:	e8 f3 e7 ff ff       	call   80489b0 <__x86.get_pc_thunk.bx>
 804a1bd:	81 c3 43 2e 00 00    	add    $0x2e43,%ebx
 804a1c3:	83 c4 08             	add    $0x8,%esp
 804a1c6:	5b                   	pop    %ebx
 804a1c7:	c3                   	ret    
